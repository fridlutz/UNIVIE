/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTitleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTitleHeading1ParserRuleCall_0_0 = (RuleCall)cTitleAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cCategoriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCategoriesCategoryParserRuleCall_2_0 = (RuleCall)cCategoriesAssignment_2.eContents().get(0);
		
		//// name=Type	1
		//// name+=Type	1-n
		//// name+=Type*	0-n
		//Document:
		//	title=Heading1 elements+=AbstractElement* // move to AbstractElement to enable defining categories anywhere
		//	categories+=Category*;
		@Override public ParserRule getRule() { return rule; }

		//title=Heading1 elements+=AbstractElement* // move to AbstractElement to enable defining categories anywhere
		//categories+=Category*
		public Group getGroup() { return cGroup; }

		//title=Heading1
		public Assignment getTitleAssignment_0() { return cTitleAssignment_0; }

		//Heading1
		public RuleCall getTitleHeading1ParserRuleCall_0_0() { return cTitleHeading1ParserRuleCall_0_0; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }

		//// move to AbstractElement to enable defining categories anywhere
		//categories+=Category*
		public Assignment getCategoriesAssignment_2() { return cCategoriesAssignment_2; }

		//Category
		public RuleCall getCategoriesCategoryParserRuleCall_2_0() { return cCategoriesCategoryParserRuleCall_2_0; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Assignment cCommentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommentWIKI_COMMENTTerminalRuleCall_0 = (RuleCall)cCommentAssignment.eContents().get(0);
		
		//Comment: //"<!--" text=(CUSTOM_STRING) "-->"
		//	comment=WIKI_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		////"<!--" text=(CUSTOM_STRING) "-->"
		//comment=WIKI_COMMENT
		public Assignment getCommentAssignment() { return cCommentAssignment; }

		//WIKI_COMMENT
		public RuleCall getCommentWIKI_COMMENTTerminalRuleCall_0() { return cCommentWIKI_COMMENTTerminalRuleCall_0; }
	}

	public class UnformattedTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnformattedText");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextCUSTOM_STRINGTerminalRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//UnformattedText: //(ID | WS | SPECIAL_CHAR)
		//	text=CUSTOM_STRING;
		@Override public ParserRule getRule() { return rule; }

		////(ID | WS | SPECIAL_CHAR)
		//text=CUSTOM_STRING
		public Assignment getTextAssignment() { return cTextAssignment; }

		//CUSTOM_STRING
		public RuleCall getTextCUSTOM_STRINGTerminalRuleCall_0() { return cTextCUSTOM_STRINGTerminalRuleCall_0; }
	}

	public class FormattedTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormattedText");
		private final Assignment cFormattedTextAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cFormattedTextAlternatives_0 = (Alternatives)cFormattedTextAssignment.eContents().get(0);
		private final RuleCall cFormattedTextItalicTextParserRuleCall_0_0 = (RuleCall)cFormattedTextAlternatives_0.eContents().get(0);
		private final RuleCall cFormattedTextBoldTextParserRuleCall_0_1 = (RuleCall)cFormattedTextAlternatives_0.eContents().get(1);
		private final RuleCall cFormattedTextItalicBoldTextParserRuleCall_0_2 = (RuleCall)cFormattedTextAlternatives_0.eContents().get(2);
		private final RuleCall cFormattedTextInternalLinkParserRuleCall_0_3 = (RuleCall)cFormattedTextAlternatives_0.eContents().get(3);
		private final RuleCall cFormattedTextExternalLinkParserRuleCall_0_4 = (RuleCall)cFormattedTextAlternatives_0.eContents().get(4);
		private final RuleCall cFormattedTextUnformattedTextParserRuleCall_0_5 = (RuleCall)cFormattedTextAlternatives_0.eContents().get(5);
		
		//FormattedText:
		//	formattedText=(ItalicText | BoldText | ItalicBoldText | InternalLink | ExternalLink | UnformattedText);
		@Override public ParserRule getRule() { return rule; }

		//formattedText=(ItalicText | BoldText | ItalicBoldText | InternalLink | ExternalLink | UnformattedText)
		public Assignment getFormattedTextAssignment() { return cFormattedTextAssignment; }

		//ItalicText | BoldText | ItalicBoldText | InternalLink | ExternalLink | UnformattedText
		public Alternatives getFormattedTextAlternatives_0() { return cFormattedTextAlternatives_0; }

		//ItalicText
		public RuleCall getFormattedTextItalicTextParserRuleCall_0_0() { return cFormattedTextItalicTextParserRuleCall_0_0; }

		//BoldText
		public RuleCall getFormattedTextBoldTextParserRuleCall_0_1() { return cFormattedTextBoldTextParserRuleCall_0_1; }

		//ItalicBoldText
		public RuleCall getFormattedTextItalicBoldTextParserRuleCall_0_2() { return cFormattedTextItalicBoldTextParserRuleCall_0_2; }

		//InternalLink
		public RuleCall getFormattedTextInternalLinkParserRuleCall_0_3() { return cFormattedTextInternalLinkParserRuleCall_0_3; }

		//ExternalLink
		public RuleCall getFormattedTextExternalLinkParserRuleCall_0_4() { return cFormattedTextExternalLinkParserRuleCall_0_4; }

		//UnformattedText
		public RuleCall getFormattedTextUnformattedTextParserRuleCall_0_5() { return cFormattedTextUnformattedTextParserRuleCall_0_5; }
	}

	public class FormattedTextWithoutLinksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormattedTextWithoutLinks");
		private final Assignment cFormattedTextWithoutLinksAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cFormattedTextWithoutLinksAlternatives_0 = (Alternatives)cFormattedTextWithoutLinksAssignment.eContents().get(0);
		private final RuleCall cFormattedTextWithoutLinksItalicTextParserRuleCall_0_0 = (RuleCall)cFormattedTextWithoutLinksAlternatives_0.eContents().get(0);
		private final RuleCall cFormattedTextWithoutLinksBoldTextParserRuleCall_0_1 = (RuleCall)cFormattedTextWithoutLinksAlternatives_0.eContents().get(1);
		private final RuleCall cFormattedTextWithoutLinksItalicBoldTextParserRuleCall_0_2 = (RuleCall)cFormattedTextWithoutLinksAlternatives_0.eContents().get(2);
		private final RuleCall cFormattedTextWithoutLinksUnformattedTextParserRuleCall_0_3 = (RuleCall)cFormattedTextWithoutLinksAlternatives_0.eContents().get(3);
		
		//FormattedTextWithoutLinks:
		//	formattedTextWithoutLinks=(ItalicText | BoldText | ItalicBoldText | UnformattedText);
		@Override public ParserRule getRule() { return rule; }

		//formattedTextWithoutLinks=(ItalicText | BoldText | ItalicBoldText | UnformattedText)
		public Assignment getFormattedTextWithoutLinksAssignment() { return cFormattedTextWithoutLinksAssignment; }

		//ItalicText | BoldText | ItalicBoldText | UnformattedText
		public Alternatives getFormattedTextWithoutLinksAlternatives_0() { return cFormattedTextWithoutLinksAlternatives_0; }

		//ItalicText
		public RuleCall getFormattedTextWithoutLinksItalicTextParserRuleCall_0_0() { return cFormattedTextWithoutLinksItalicTextParserRuleCall_0_0; }

		//BoldText
		public RuleCall getFormattedTextWithoutLinksBoldTextParserRuleCall_0_1() { return cFormattedTextWithoutLinksBoldTextParserRuleCall_0_1; }

		//ItalicBoldText
		public RuleCall getFormattedTextWithoutLinksItalicBoldTextParserRuleCall_0_2() { return cFormattedTextWithoutLinksItalicBoldTextParserRuleCall_0_2; }

		//UnformattedText
		public RuleCall getFormattedTextWithoutLinksUnformattedTextParserRuleCall_0_3() { return cFormattedTextWithoutLinksUnformattedTextParserRuleCall_0_3; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Assignment cElementAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cElementAlternatives_0 = (Alternatives)cElementAssignment.eContents().get(0);
		private final RuleCall cElementTemplateParserRuleCall_0_0 = (RuleCall)cElementAlternatives_0.eContents().get(0);
		private final RuleCall cElementHeadingParserRuleCall_0_1 = (RuleCall)cElementAlternatives_0.eContents().get(1);
		private final RuleCall cElementTextElementParserRuleCall_0_2 = (RuleCall)cElementAlternatives_0.eContents().get(2);
		private final RuleCall cElementCommentParserRuleCall_0_3 = (RuleCall)cElementAlternatives_0.eContents().get(3);
		
		//AbstractElement:
		//	element=(Template | Heading | TextElement | Comment);
		@Override public ParserRule getRule() { return rule; }

		//element=(Template | Heading | TextElement | Comment)
		public Assignment getElementAssignment() { return cElementAssignment; }

		//Template | Heading | TextElement | Comment
		public Alternatives getElementAlternatives_0() { return cElementAlternatives_0; }

		//Template
		public RuleCall getElementTemplateParserRuleCall_0_0() { return cElementTemplateParserRuleCall_0_0; }

		//Heading
		public RuleCall getElementHeadingParserRuleCall_0_1() { return cElementHeadingParserRuleCall_0_1; }

		//TextElement
		public RuleCall getElementTextElementParserRuleCall_0_2() { return cElementTextElementParserRuleCall_0_2; }

		//Comment
		public RuleCall getElementCommentParserRuleCall_0_3() { return cElementCommentParserRuleCall_0_3; }
	}

	public class TextElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextElement");
		private final Assignment cElementAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cElementAlternatives_0 = (Alternatives)cElementAssignment.eContents().get(0);
		private final RuleCall cElementBlockQuoteParserRuleCall_0_0 = (RuleCall)cElementAlternatives_0.eContents().get(0);
		private final RuleCall cElementFileParserRuleCall_0_1 = (RuleCall)cElementAlternatives_0.eContents().get(1);
		private final RuleCall cElementListParserRuleCall_0_2 = (RuleCall)cElementAlternatives_0.eContents().get(2);
		private final RuleCall cElementFormattedTextParserRuleCall_0_3 = (RuleCall)cElementAlternatives_0.eContents().get(3);
		
		//TextElement:
		//	element=(BlockQuote | File | List | FormattedText);
		@Override public ParserRule getRule() { return rule; }

		//element=(BlockQuote | File | List | FormattedText)
		public Assignment getElementAssignment() { return cElementAssignment; }

		//BlockQuote | File | List | FormattedText
		public Alternatives getElementAlternatives_0() { return cElementAlternatives_0; }

		//BlockQuote
		public RuleCall getElementBlockQuoteParserRuleCall_0_0() { return cElementBlockQuoteParserRuleCall_0_0; }

		//File
		public RuleCall getElementFileParserRuleCall_0_1() { return cElementFileParserRuleCall_0_1; }

		//List
		public RuleCall getElementListParserRuleCall_0_2() { return cElementListParserRuleCall_0_2; }

		//FormattedText
		public RuleCall getElementFormattedTextParserRuleCall_0_3() { return cElementFormattedTextParserRuleCall_0_3; }
	}

	public class HeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading");
		private final Assignment cHeadingAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cHeadingAlternatives_0 = (Alternatives)cHeadingAssignment.eContents().get(0);
		private final RuleCall cHeadingHeading2ParserRuleCall_0_0 = (RuleCall)cHeadingAlternatives_0.eContents().get(0);
		private final RuleCall cHeadingHeading3ParserRuleCall_0_1 = (RuleCall)cHeadingAlternatives_0.eContents().get(1);
		private final RuleCall cHeadingHeading4ParserRuleCall_0_2 = (RuleCall)cHeadingAlternatives_0.eContents().get(2);
		
		//Heading:
		//	heading=(Heading2 | Heading3 | Heading4);
		@Override public ParserRule getRule() { return rule; }

		//heading=(Heading2 | Heading3 | Heading4)
		public Assignment getHeadingAssignment() { return cHeadingAssignment; }

		//Heading2 | Heading3 | Heading4
		public Alternatives getHeadingAlternatives_0() { return cHeadingAlternatives_0; }

		//Heading2
		public RuleCall getHeadingHeading2ParserRuleCall_0_0() { return cHeadingHeading2ParserRuleCall_0_0; }

		//Heading3
		public RuleCall getHeadingHeading3ParserRuleCall_0_1() { return cHeadingHeading3ParserRuleCall_0_1; }

		//Heading4
		public RuleCall getHeadingHeading4ParserRuleCall_0_2() { return cHeadingHeading4ParserRuleCall_0_2; }
	}

	public class Heading1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingFormattedTextParserRuleCall_1_0 = (RuleCall)cHeadingAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading1:
		//	"=" heading=FormattedText "=";
		@Override public ParserRule getRule() { return rule; }

		//"=" heading=FormattedText "="
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//heading=FormattedText
		public Assignment getHeadingAssignment_1() { return cHeadingAssignment_1; }

		//FormattedText
		public RuleCall getHeadingFormattedTextParserRuleCall_1_0() { return cHeadingFormattedTextParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
	}

	public class Heading2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingFormattedTextParserRuleCall_1_0 = (RuleCall)cHeadingAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading2:
		//	"==" heading=FormattedText "==";
		@Override public ParserRule getRule() { return rule; }

		//"==" heading=FormattedText "=="
		public Group getGroup() { return cGroup; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//heading=FormattedText
		public Assignment getHeadingAssignment_1() { return cHeadingAssignment_1; }

		//FormattedText
		public RuleCall getHeadingFormattedTextParserRuleCall_1_0() { return cHeadingFormattedTextParserRuleCall_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
	}

	public class Heading3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingFormattedTextParserRuleCall_1_0 = (RuleCall)cHeadingAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading3:
		//	"===" heading=FormattedText "===";
		@Override public ParserRule getRule() { return rule; }

		//"===" heading=FormattedText "==="
		public Group getGroup() { return cGroup; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }

		//heading=FormattedText
		public Assignment getHeadingAssignment_1() { return cHeadingAssignment_1; }

		//FormattedText
		public RuleCall getHeadingFormattedTextParserRuleCall_1_0() { return cHeadingFormattedTextParserRuleCall_1_0; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }
	}

	public class Heading4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingFormattedTextParserRuleCall_1_0 = (RuleCall)cHeadingAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading4:
		//	"====" heading=FormattedText "====";
		@Override public ParserRule getRule() { return rule; }

		//"====" heading=FormattedText "===="
		public Group getGroup() { return cGroup; }

		//"===="
		public Keyword getEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0; }

		//heading=FormattedText
		public Assignment getHeadingAssignment_1() { return cHeadingAssignment_1; }

		//FormattedText
		public RuleCall getHeadingFormattedTextParserRuleCall_1_0() { return cHeadingFormattedTextParserRuleCall_1_0; }

		//"===="
		public Keyword getEqualsSignEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignEqualsSignKeyword_2; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Assignment cListAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cListAlternatives_0 = (Alternatives)cListAssignment.eContents().get(0);
		private final RuleCall cListOrderedListParserRuleCall_0_0 = (RuleCall)cListAlternatives_0.eContents().get(0);
		private final RuleCall cListUnorderedListParserRuleCall_0_1 = (RuleCall)cListAlternatives_0.eContents().get(1);
		
		//List:
		//	list=(OrderedList | UnorderedList);
		@Override public ParserRule getRule() { return rule; }

		//list=(OrderedList | UnorderedList)
		public Assignment getListAssignment() { return cListAssignment; }

		//OrderedList | UnorderedList
		public Alternatives getListAlternatives_0() { return cListAlternatives_0; }

		//OrderedList
		public RuleCall getListOrderedListParserRuleCall_0_0() { return cListOrderedListParserRuleCall_0_0; }

		//UnorderedList
		public RuleCall getListUnorderedListParserRuleCall_0_1() { return cListUnorderedListParserRuleCall_0_1; }
	}

	public class OrderedListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderedList");
		private final Assignment cItemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cItemsOrderedListItemParserRuleCall_0 = (RuleCall)cItemsAssignment.eContents().get(0);
		
		//OrderedList:
		//	items+=OrderedListItem;
		@Override public ParserRule getRule() { return rule; }

		//items+=OrderedListItem
		public Assignment getItemsAssignment() { return cItemsAssignment; }

		//OrderedListItem
		public RuleCall getItemsOrderedListItemParserRuleCall_0() { return cItemsOrderedListItemParserRuleCall_0; }
	}

	public class UnorderedListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnorderedList");
		private final Assignment cItemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cItemsUnorderedListItemParserRuleCall_0 = (RuleCall)cItemsAssignment.eContents().get(0);
		
		//UnorderedList:
		//	items+=UnorderedListItem;
		@Override public ParserRule getRule() { return rule; }

		//items+=UnorderedListItem
		public Assignment getItemsAssignment() { return cItemsAssignment; }

		//UnorderedListItem
		public RuleCall getItemsUnorderedListItemParserRuleCall_0() { return cItemsUnorderedListItemParserRuleCall_0; }
	}

	public class OrderedListItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderedListItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cItemAlternatives_1_0 = (Alternatives)cItemAssignment_1.eContents().get(0);
		private final RuleCall cItemFormattedTextParserRuleCall_1_0_0 = (RuleCall)cItemAlternatives_1_0.eContents().get(0);
		private final RuleCall cItemListParserRuleCall_1_0_1 = (RuleCall)cItemAlternatives_1_0.eContents().get(1);
		
		//OrderedListItem:
		//	"#" item=(FormattedText | List);
		@Override public ParserRule getRule() { return rule; }

		//"#" item=(FormattedText | List)
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//item=(FormattedText | List)
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//FormattedText | List
		public Alternatives getItemAlternatives_1_0() { return cItemAlternatives_1_0; }

		//FormattedText
		public RuleCall getItemFormattedTextParserRuleCall_1_0_0() { return cItemFormattedTextParserRuleCall_1_0_0; }

		//List
		public RuleCall getItemListParserRuleCall_1_0_1() { return cItemListParserRuleCall_1_0_1; }
	}

	public class UnorderedListItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnorderedListItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cItemAlternatives_1_0 = (Alternatives)cItemAssignment_1.eContents().get(0);
		private final RuleCall cItemFormattedTextParserRuleCall_1_0_0 = (RuleCall)cItemAlternatives_1_0.eContents().get(0);
		private final RuleCall cItemListParserRuleCall_1_0_1 = (RuleCall)cItemAlternatives_1_0.eContents().get(1);
		
		//UnorderedListItem:
		//	"*" item=(FormattedText | List);
		@Override public ParserRule getRule() { return rule; }

		//"*" item=(FormattedText | List)
		public Group getGroup() { return cGroup; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//item=(FormattedText | List)
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//FormattedText | List
		public Alternatives getItemAlternatives_1_0() { return cItemAlternatives_1_0; }

		//FormattedText
		public RuleCall getItemFormattedTextParserRuleCall_1_0_0() { return cItemFormattedTextParserRuleCall_1_0_0; }

		//List
		public RuleCall getItemListParserRuleCall_1_0_1() { return cItemListParserRuleCall_1_0_1; }
	}

	public class ItalicTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItalicText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItalicTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cItalicTextAlternatives_1_0 = (Alternatives)cItalicTextAssignment_1.eContents().get(0);
		private final RuleCall cItalicTextInternalLinkParserRuleCall_1_0_0 = (RuleCall)cItalicTextAlternatives_1_0.eContents().get(0);
		private final RuleCall cItalicTextExternalLinkParserRuleCall_1_0_1 = (RuleCall)cItalicTextAlternatives_1_0.eContents().get(1);
		private final RuleCall cItalicTextUnformattedTextParserRuleCall_1_0_2 = (RuleCall)cItalicTextAlternatives_1_0.eContents().get(2);
		private final Keyword cApostropheApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ItalicText:
		//	"\'\'" italicText=(InternalLink | ExternalLink | UnformattedText) "\'\'";
		@Override public ParserRule getRule() { return rule; }

		//"\'\'" italicText=(InternalLink | ExternalLink | UnformattedText) "\'\'"
		public Group getGroup() { return cGroup; }

		//"\'\'"
		public Keyword getApostropheApostropheKeyword_0() { return cApostropheApostropheKeyword_0; }

		//italicText=(InternalLink | ExternalLink | UnformattedText)
		public Assignment getItalicTextAssignment_1() { return cItalicTextAssignment_1; }

		//InternalLink | ExternalLink | UnformattedText
		public Alternatives getItalicTextAlternatives_1_0() { return cItalicTextAlternatives_1_0; }

		//InternalLink
		public RuleCall getItalicTextInternalLinkParserRuleCall_1_0_0() { return cItalicTextInternalLinkParserRuleCall_1_0_0; }

		//ExternalLink
		public RuleCall getItalicTextExternalLinkParserRuleCall_1_0_1() { return cItalicTextExternalLinkParserRuleCall_1_0_1; }

		//UnformattedText
		public RuleCall getItalicTextUnformattedTextParserRuleCall_1_0_2() { return cItalicTextUnformattedTextParserRuleCall_1_0_2; }

		//"\'\'"
		public Keyword getApostropheApostropheKeyword_2() { return cApostropheApostropheKeyword_2; }
	}

	public class BoldTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoldText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheApostropheApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoldTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cBoldTextAlternatives_1_0 = (Alternatives)cBoldTextAssignment_1.eContents().get(0);
		private final RuleCall cBoldTextInternalLinkParserRuleCall_1_0_0 = (RuleCall)cBoldTextAlternatives_1_0.eContents().get(0);
		private final RuleCall cBoldTextExternalLinkParserRuleCall_1_0_1 = (RuleCall)cBoldTextAlternatives_1_0.eContents().get(1);
		private final RuleCall cBoldTextUnformattedTextParserRuleCall_1_0_2 = (RuleCall)cBoldTextAlternatives_1_0.eContents().get(2);
		private final Keyword cApostropheApostropheApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BoldText:
		//	"\'\'\'" boldText=(InternalLink | ExternalLink | UnformattedText) "\'\'\'";
		@Override public ParserRule getRule() { return rule; }

		//"\'\'\'" boldText=(InternalLink | ExternalLink | UnformattedText) "\'\'\'"
		public Group getGroup() { return cGroup; }

		//"\'\'\'"
		public Keyword getApostropheApostropheApostropheKeyword_0() { return cApostropheApostropheApostropheKeyword_0; }

		//boldText=(InternalLink | ExternalLink | UnformattedText)
		public Assignment getBoldTextAssignment_1() { return cBoldTextAssignment_1; }

		//InternalLink | ExternalLink | UnformattedText
		public Alternatives getBoldTextAlternatives_1_0() { return cBoldTextAlternatives_1_0; }

		//InternalLink
		public RuleCall getBoldTextInternalLinkParserRuleCall_1_0_0() { return cBoldTextInternalLinkParserRuleCall_1_0_0; }

		//ExternalLink
		public RuleCall getBoldTextExternalLinkParserRuleCall_1_0_1() { return cBoldTextExternalLinkParserRuleCall_1_0_1; }

		//UnformattedText
		public RuleCall getBoldTextUnformattedTextParserRuleCall_1_0_2() { return cBoldTextUnformattedTextParserRuleCall_1_0_2; }

		//"\'\'\'"
		public Keyword getApostropheApostropheApostropheKeyword_2() { return cApostropheApostropheApostropheKeyword_2; }
	}

	public class ItalicBoldTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItalicBoldText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheApostropheApostropheApostropheApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItalicBoldTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cItalicBoldTextAlternatives_1_0 = (Alternatives)cItalicBoldTextAssignment_1.eContents().get(0);
		private final RuleCall cItalicBoldTextInternalLinkParserRuleCall_1_0_0 = (RuleCall)cItalicBoldTextAlternatives_1_0.eContents().get(0);
		private final RuleCall cItalicBoldTextExternalLinkParserRuleCall_1_0_1 = (RuleCall)cItalicBoldTextAlternatives_1_0.eContents().get(1);
		private final RuleCall cItalicBoldTextUnformattedTextParserRuleCall_1_0_2 = (RuleCall)cItalicBoldTextAlternatives_1_0.eContents().get(2);
		private final Keyword cApostropheApostropheApostropheApostropheApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ItalicBoldText:
		//	"\'\'\'\'\'" italicBoldText=(InternalLink | ExternalLink | UnformattedText) "\'\'\'\'\'";
		@Override public ParserRule getRule() { return rule; }

		//"\'\'\'\'\'" italicBoldText=(InternalLink | ExternalLink | UnformattedText) "\'\'\'\'\'"
		public Group getGroup() { return cGroup; }

		//"\'\'\'\'\'"
		public Keyword getApostropheApostropheApostropheApostropheApostropheKeyword_0() { return cApostropheApostropheApostropheApostropheApostropheKeyword_0; }

		//italicBoldText=(InternalLink | ExternalLink | UnformattedText)
		public Assignment getItalicBoldTextAssignment_1() { return cItalicBoldTextAssignment_1; }

		//InternalLink | ExternalLink | UnformattedText
		public Alternatives getItalicBoldTextAlternatives_1_0() { return cItalicBoldTextAlternatives_1_0; }

		//InternalLink
		public RuleCall getItalicBoldTextInternalLinkParserRuleCall_1_0_0() { return cItalicBoldTextInternalLinkParserRuleCall_1_0_0; }

		//ExternalLink
		public RuleCall getItalicBoldTextExternalLinkParserRuleCall_1_0_1() { return cItalicBoldTextExternalLinkParserRuleCall_1_0_1; }

		//UnformattedText
		public RuleCall getItalicBoldTextUnformattedTextParserRuleCall_1_0_2() { return cItalicBoldTextUnformattedTextParserRuleCall_1_0_2; }

		//"\'\'\'\'\'"
		public Keyword getApostropheApostropheApostropheApostropheApostropheKeyword_2() { return cApostropheApostropheApostropheApostropheApostropheKeyword_2; }
	}

	public class BlockQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockQuote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBlockquoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlockQuoteTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockQuoteTextFormattedTextParserRuleCall_1_0 = (RuleCall)cBlockQuoteTextAssignment_1.eContents().get(0);
		private final Assignment cAdditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdditionalFormattedTextParserRuleCall_2_0 = (RuleCall)cAdditionalAssignment_2.eContents().get(0);
		private final Keyword cBlockquoteKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockQuote:
		//	"<blockquote>" blockQuoteText=FormattedText additional+=FormattedText* "</blockquote>";
		@Override public ParserRule getRule() { return rule; }

		//"<blockquote>" blockQuoteText=FormattedText additional+=FormattedText* "</blockquote>"
		public Group getGroup() { return cGroup; }

		//"<blockquote>"
		public Keyword getBlockquoteKeyword_0() { return cBlockquoteKeyword_0; }

		//blockQuoteText=FormattedText
		public Assignment getBlockQuoteTextAssignment_1() { return cBlockQuoteTextAssignment_1; }

		//FormattedText
		public RuleCall getBlockQuoteTextFormattedTextParserRuleCall_1_0() { return cBlockQuoteTextFormattedTextParserRuleCall_1_0; }

		//additional+=FormattedText*
		public Assignment getAdditionalAssignment_2() { return cAdditionalAssignment_2; }

		//FormattedText
		public RuleCall getAdditionalFormattedTextParserRuleCall_2_0() { return cAdditionalFormattedTextParserRuleCall_2_0; }

		//"</blockquote>"
		public Keyword getBlockquoteKeyword_3() { return cBlockquoteKeyword_3; }
	}

	public class ExternalLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkNameUnformattedTextParserRuleCall_1_0 = (RuleCall)cLinkNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSpaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRenamedLinkAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRenamedLinkFormattedTextWithoutLinksParserRuleCall_2_1_0 = (RuleCall)cRenamedLinkAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExternalLink:
		//	"[" linkName=UnformattedText (" " renamedLink=FormattedTextWithoutLinks)? "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" linkName=UnformattedText (" " renamedLink=FormattedTextWithoutLinks)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//linkName=UnformattedText
		public Assignment getLinkNameAssignment_1() { return cLinkNameAssignment_1; }

		//UnformattedText
		public RuleCall getLinkNameUnformattedTextParserRuleCall_1_0() { return cLinkNameUnformattedTextParserRuleCall_1_0; }

		//(" " renamedLink=FormattedTextWithoutLinks)?
		public Group getGroup_2() { return cGroup_2; }

		//" "
		public Keyword getSpaceKeyword_2_0() { return cSpaceKeyword_2_0; }

		//renamedLink=FormattedTextWithoutLinks
		public Assignment getRenamedLinkAssignment_2_1() { return cRenamedLinkAssignment_2_1; }

		//FormattedTextWithoutLinks
		public RuleCall getRenamedLinkFormattedTextWithoutLinksParserRuleCall_2_1_0() { return cRenamedLinkFormattedTextWithoutLinksParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class InternalLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkNameUnformattedTextParserRuleCall_1_0 = (RuleCall)cLinkNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRenamedLinkAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRenamedLinkFormattedTextWithoutLinksParserRuleCall_2_1_0 = (RuleCall)cRenamedLinkAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InternalLink:
		//	"[[" linkName=UnformattedText ("|" renamedLink=FormattedTextWithoutLinks)? "]]";
		@Override public ParserRule getRule() { return rule; }

		//"[[" linkName=UnformattedText ("|" renamedLink=FormattedTextWithoutLinks)? "]]"
		public Group getGroup() { return cGroup; }

		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }

		//linkName=UnformattedText
		public Assignment getLinkNameAssignment_1() { return cLinkNameAssignment_1; }

		//UnformattedText
		public RuleCall getLinkNameUnformattedTextParserRuleCall_1_0() { return cLinkNameUnformattedTextParserRuleCall_1_0; }

		//("|" renamedLink=FormattedTextWithoutLinks)?
		public Group getGroup_2() { return cGroup_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//renamedLink=FormattedTextWithoutLinks
		public Assignment getRenamedLinkAssignment_2_1() { return cRenamedLinkAssignment_2_1; }

		//FormattedTextWithoutLinks
		public RuleCall getRenamedLinkFormattedTextWithoutLinksParserRuleCall_2_1_0() { return cRenamedLinkFormattedTextWithoutLinksParserRuleCall_2_1_0; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_3() { return cRightSquareBracketRightSquareBracketKeyword_3; }
	}

	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileNameUnformattedTextParserRuleCall_1_0 = (RuleCall)cFileNameAssignment_1.eContents().get(0);
		private final Assignment cViewTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cViewTypeAlternatives_2_0 = (Alternatives)cViewTypeAssignment_2.eContents().get(0);
		private final Keyword cViewTypeThumbKeyword_2_0_0 = (Keyword)cViewTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cViewTypeFrameKeyword_2_0_1 = (Keyword)cViewTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cViewTypeFramelessKeyword_2_0_2 = (Keyword)cViewTypeAlternatives_2_0.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTextFormattedTextWithoutLinksParserRuleCall_3_1_0 = (RuleCall)cTextAssignment_3_1.eContents().get(0);
		private final Assignment cAdditionalAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAdditionalFormattedTextWithoutLinksParserRuleCall_3_2_0 = (RuleCall)cAdditionalAssignment_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//File:
		//	"[[File:" fileName=UnformattedText viewType=("|thumb" | "|frame" | "|frameless")? ("|" text=FormattedTextWithoutLinks
		//	additional+=FormattedTextWithoutLinks*)? "]]";
		@Override public ParserRule getRule() { return rule; }

		//"[[File:" fileName=UnformattedText viewType=("|thumb" | "|frame" | "|frameless")? ("|" text=FormattedTextWithoutLinks
		//additional+=FormattedTextWithoutLinks*)? "]]"
		public Group getGroup() { return cGroup; }

		//"[[File:"
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }

		//fileName=UnformattedText
		public Assignment getFileNameAssignment_1() { return cFileNameAssignment_1; }

		//UnformattedText
		public RuleCall getFileNameUnformattedTextParserRuleCall_1_0() { return cFileNameUnformattedTextParserRuleCall_1_0; }

		//viewType=("|thumb" | "|frame" | "|frameless")?
		public Assignment getViewTypeAssignment_2() { return cViewTypeAssignment_2; }

		//"|thumb" | "|frame" | "|frameless"
		public Alternatives getViewTypeAlternatives_2_0() { return cViewTypeAlternatives_2_0; }

		//"|thumb"
		public Keyword getViewTypeThumbKeyword_2_0_0() { return cViewTypeThumbKeyword_2_0_0; }

		//"|frame"
		public Keyword getViewTypeFrameKeyword_2_0_1() { return cViewTypeFrameKeyword_2_0_1; }

		//"|frameless"
		public Keyword getViewTypeFramelessKeyword_2_0_2() { return cViewTypeFramelessKeyword_2_0_2; }

		//("|" text=FormattedTextWithoutLinks additional+=FormattedTextWithoutLinks*)?
		public Group getGroup_3() { return cGroup_3; }

		//"|"
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }

		//text=FormattedTextWithoutLinks
		public Assignment getTextAssignment_3_1() { return cTextAssignment_3_1; }

		//FormattedTextWithoutLinks
		public RuleCall getTextFormattedTextWithoutLinksParserRuleCall_3_1_0() { return cTextFormattedTextWithoutLinksParserRuleCall_3_1_0; }

		//additional+=FormattedTextWithoutLinks*
		public Assignment getAdditionalAssignment_3_2() { return cAdditionalAssignment_3_2; }

		//FormattedTextWithoutLinks
		public RuleCall getAdditionalFormattedTextWithoutLinksParserRuleCall_3_2_0() { return cAdditionalFormattedTextWithoutLinksParserRuleCall_3_2_0; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_4() { return cRightSquareBracketRightSquareBracketKeyword_4; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCategoryLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCategoryLinkUnformattedTextParserRuleCall_1_0 = (RuleCall)cCategoryLinkAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Category:
		//	"[[Category:" categoryLink=UnformattedText "|*"? "]]";
		@Override public ParserRule getRule() { return rule; }

		//"[[Category:" categoryLink=UnformattedText "|*"? "]]"
		public Group getGroup() { return cGroup; }

		//"[[Category:"
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }

		//categoryLink=UnformattedText
		public Assignment getCategoryLinkAssignment_1() { return cCategoryLinkAssignment_1; }

		//UnformattedText
		public RuleCall getCategoryLinkUnformattedTextParserRuleCall_1_0() { return cCategoryLinkUnformattedTextParserRuleCall_1_0; }

		//"|*"?
		public Keyword getVerticalLineAsteriskKeyword_2() { return cVerticalLineAsteriskKeyword_2; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_3() { return cRightSquareBracketRightSquareBracketKeyword_3; }
	}

	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTemplateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTemplateTemplateTypeParserRuleCall_1_0 = (RuleCall)cTemplateAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Template:
		//	"{{" template=TemplateType "}}";
		@Override public ParserRule getRule() { return rule; }

		//"{{" template=TemplateType "}}"
		public Group getGroup() { return cGroup; }

		//"{{"
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketLeftCurlyBracketKeyword_0; }

		//template=TemplateType
		public Assignment getTemplateAssignment_1() { return cTemplateAssignment_1; }

		//TemplateType
		public RuleCall getTemplateTemplateTypeParserRuleCall_1_0() { return cTemplateTemplateTypeParserRuleCall_1_0; }

		//"}}"
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_2() { return cRightCurlyBracketRightCurlyBracketKeyword_2; }
	}

	public class TemplateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeMetadataParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeMainInformationParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		
		//TemplateType:
		//	type=(Metadata | MainInformation);
		@Override public ParserRule getRule() { return rule; }

		//type=(Metadata | MainInformation)
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//Metadata | MainInformation
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }

		//Metadata
		public RuleCall getTypeMetadataParserRuleCall_0_0() { return cTypeMetadataParserRuleCall_0_0; }

		//MainInformation
		public RuleCall getTypeMainInformationParserRuleCall_0_1() { return cTypeMainInformationParserRuleCall_0_1; }
	}

	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAboutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAboutAboutParserRuleCall_0_0 = (RuleCall)cAboutAssignment_0.eContents().get(0);
		private final Assignment cActualInfoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActualInfoActualInformationParserRuleCall_1_0 = (RuleCall)cActualInfoAssignment_1.eContents().get(0);
		
		//Metadata:
		//	about=About actualInfo=ActualInformation?;
		@Override public ParserRule getRule() { return rule; }

		//about=About actualInfo=ActualInformation?
		public Group getGroup() { return cGroup; }

		//about=About
		public Assignment getAboutAssignment_0() { return cAboutAssignment_0; }

		//About
		public RuleCall getAboutAboutParserRuleCall_0_0() { return cAboutAboutParserRuleCall_0_0; }

		//actualInfo=ActualInformation?
		public Assignment getActualInfoAssignment_1() { return cActualInfoAssignment_1; }

		//ActualInformation
		public RuleCall getActualInfoActualInformationParserRuleCall_1_0() { return cActualInfoActualInformationParserRuleCall_1_0; }
	}

	public class AboutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "About");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAboutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAboutTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAboutTextUnformattedTextParserRuleCall_1_0 = (RuleCall)cAboutTextAssignment_1.eContents().get(0);
		
		//About:
		//	"about|" aboutText=UnformattedText;
		@Override public ParserRule getRule() { return rule; }

		//"about|" aboutText=UnformattedText
		public Group getGroup() { return cGroup; }

		//"about|"
		public Keyword getAboutKeyword_0() { return cAboutKeyword_0; }

		//aboutText=UnformattedText
		public Assignment getAboutTextAssignment_1() { return cAboutTextAssignment_1; }

		//UnformattedText
		public RuleCall getAboutTextUnformattedTextParserRuleCall_1_0() { return cAboutTextUnformattedTextParserRuleCall_1_0; }
	}

	public class ActualInformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActualInformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInformationOnWhatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInformationOnWhatUnformattedTextParserRuleCall_1_0 = (RuleCall)cInformationOnWhatAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinkAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinkUnformattedTextParserRuleCall_3_0 = (RuleCall)cLinkAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAndKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAdditionalLinksAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAdditionalLinksUnformattedTextParserRuleCall_4_1_0 = (RuleCall)cAdditionalLinksAssignment_4_1.eContents().get(0);
		
		//ActualInformation:
		//	"|" informationOnWhat=UnformattedText "|" link=UnformattedText ("|and|" additionalLinks+=UnformattedText)*;
		@Override public ParserRule getRule() { return rule; }

		//"|" informationOnWhat=UnformattedText "|" link=UnformattedText ("|and|" additionalLinks+=UnformattedText)*
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//informationOnWhat=UnformattedText
		public Assignment getInformationOnWhatAssignment_1() { return cInformationOnWhatAssignment_1; }

		//UnformattedText
		public RuleCall getInformationOnWhatUnformattedTextParserRuleCall_1_0() { return cInformationOnWhatUnformattedTextParserRuleCall_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }

		//link=UnformattedText
		public Assignment getLinkAssignment_3() { return cLinkAssignment_3; }

		//UnformattedText
		public RuleCall getLinkUnformattedTextParserRuleCall_3_0() { return cLinkUnformattedTextParserRuleCall_3_0; }

		//("|and|" additionalLinks+=UnformattedText)*
		public Group getGroup_4() { return cGroup_4; }

		//"|and|"
		public Keyword getAndKeyword_4_0() { return cAndKeyword_4_0; }

		//additionalLinks+=UnformattedText
		public Assignment getAdditionalLinksAssignment_4_1() { return cAdditionalLinksAssignment_4_1; }

		//UnformattedText
		public RuleCall getAdditionalLinksUnformattedTextParserRuleCall_4_1_0() { return cAdditionalLinksUnformattedTextParserRuleCall_4_1_0; }
	}

	public class MainInformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainInformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkUnformattedTextParserRuleCall_1_0 = (RuleCall)cLinkAssignment_1.eContents().get(0);
		
		//MainInformation:
		//	"main|" link=UnformattedText;
		@Override public ParserRule getRule() { return rule; }

		//"main|" link=UnformattedText
		public Group getGroup() { return cGroup; }

		//"main|"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }

		//link=UnformattedText
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }

		//UnformattedText
		public RuleCall getLinkUnformattedTextParserRuleCall_1_0() { return cLinkUnformattedTextParserRuleCall_1_0; }
	}
	
	
	private final DocumentElements pDocument;
	private final TerminalRule tCUSTOM_STRING;
	private final TerminalRule tWIKI_COMMENT;
	private final TerminalRule tSTRING;
	private final CommentElements pComment;
	private final UnformattedTextElements pUnformattedText;
	private final FormattedTextElements pFormattedText;
	private final FormattedTextWithoutLinksElements pFormattedTextWithoutLinks;
	private final AbstractElementElements pAbstractElement;
	private final TextElementElements pTextElement;
	private final HeadingElements pHeading;
	private final Heading1Elements pHeading1;
	private final Heading2Elements pHeading2;
	private final Heading3Elements pHeading3;
	private final Heading4Elements pHeading4;
	private final ListElements pList;
	private final OrderedListElements pOrderedList;
	private final UnorderedListElements pUnorderedList;
	private final OrderedListItemElements pOrderedListItem;
	private final UnorderedListItemElements pUnorderedListItem;
	private final ItalicTextElements pItalicText;
	private final BoldTextElements pBoldText;
	private final ItalicBoldTextElements pItalicBoldText;
	private final BlockQuoteElements pBlockQuote;
	private final ExternalLinkElements pExternalLink;
	private final InternalLinkElements pInternalLink;
	private final FileElements pFile;
	private final CategoryElements pCategory;
	private final TemplateElements pTemplate;
	private final TemplateTypeElements pTemplateType;
	private final MetadataElements pMetadata;
	private final AboutElements pAbout;
	private final ActualInformationElements pActualInformation;
	private final MainInformationElements pMainInformation;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocument = new DocumentElements();
		this.tCUSTOM_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CUSTOM_STRING");
		this.tWIKI_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WIKI_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.pComment = new CommentElements();
		this.pUnformattedText = new UnformattedTextElements();
		this.pFormattedText = new FormattedTextElements();
		this.pFormattedTextWithoutLinks = new FormattedTextWithoutLinksElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pTextElement = new TextElementElements();
		this.pHeading = new HeadingElements();
		this.pHeading1 = new Heading1Elements();
		this.pHeading2 = new Heading2Elements();
		this.pHeading3 = new Heading3Elements();
		this.pHeading4 = new Heading4Elements();
		this.pList = new ListElements();
		this.pOrderedList = new OrderedListElements();
		this.pUnorderedList = new UnorderedListElements();
		this.pOrderedListItem = new OrderedListItemElements();
		this.pUnorderedListItem = new UnorderedListItemElements();
		this.pItalicText = new ItalicTextElements();
		this.pBoldText = new BoldTextElements();
		this.pItalicBoldText = new ItalicBoldTextElements();
		this.pBlockQuote = new BlockQuoteElements();
		this.pExternalLink = new ExternalLinkElements();
		this.pInternalLink = new InternalLinkElements();
		this.pFile = new FileElements();
		this.pCategory = new CategoryElements();
		this.pTemplate = new TemplateElements();
		this.pTemplateType = new TemplateTypeElements();
		this.pMetadata = new MetadataElements();
		this.pAbout = new AboutElements();
		this.pActualInformation = new ActualInformationElements();
		this.pMainInformation = new MainInformationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// name=Type	1
	//// name+=Type	1-n
	//// name+=Type*	0-n
	//Document:
	//	title=Heading1 elements+=AbstractElement* // move to AbstractElement to enable defining categories anywhere
	//	categories+=Category*;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}

	//terminal CUSTOM_STRING:
	//	("a".."z" | "A".."Z" | "0".."9" | "_" | "-" | "." | "!" | "?" | "," | "#" | ":" | "(" | ")" | " " | "/" | "\"")+;
	public TerminalRule getCUSTOM_STRINGRule() {
		return tCUSTOM_STRING;
	} 

	//terminal WIKI_COMMENT:
	//	"<!--"->"-->";
	public TerminalRule getWIKI_COMMENTRule() {
		return tWIKI_COMMENT;
	} 

	////override STRING to ignore " and ' in actual instance text
	//terminal STRING:
	//	"´";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//Comment: //"<!--" text=(CUSTOM_STRING) "-->"
	//	comment=WIKI_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//UnformattedText: //(ID | WS | SPECIAL_CHAR)
	//	text=CUSTOM_STRING;
	public UnformattedTextElements getUnformattedTextAccess() {
		return pUnformattedText;
	}
	
	public ParserRule getUnformattedTextRule() {
		return getUnformattedTextAccess().getRule();
	}

	//FormattedText:
	//	formattedText=(ItalicText | BoldText | ItalicBoldText | InternalLink | ExternalLink | UnformattedText);
	public FormattedTextElements getFormattedTextAccess() {
		return pFormattedText;
	}
	
	public ParserRule getFormattedTextRule() {
		return getFormattedTextAccess().getRule();
	}

	//FormattedTextWithoutLinks:
	//	formattedTextWithoutLinks=(ItalicText | BoldText | ItalicBoldText | UnformattedText);
	public FormattedTextWithoutLinksElements getFormattedTextWithoutLinksAccess() {
		return pFormattedTextWithoutLinks;
	}
	
	public ParserRule getFormattedTextWithoutLinksRule() {
		return getFormattedTextWithoutLinksAccess().getRule();
	}

	//AbstractElement:
	//	element=(Template | Heading | TextElement | Comment);
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//TextElement:
	//	element=(BlockQuote | File | List | FormattedText);
	public TextElementElements getTextElementAccess() {
		return pTextElement;
	}
	
	public ParserRule getTextElementRule() {
		return getTextElementAccess().getRule();
	}

	//Heading:
	//	heading=(Heading2 | Heading3 | Heading4);
	public HeadingElements getHeadingAccess() {
		return pHeading;
	}
	
	public ParserRule getHeadingRule() {
		return getHeadingAccess().getRule();
	}

	//Heading1:
	//	"=" heading=FormattedText "=";
	public Heading1Elements getHeading1Access() {
		return pHeading1;
	}
	
	public ParserRule getHeading1Rule() {
		return getHeading1Access().getRule();
	}

	//Heading2:
	//	"==" heading=FormattedText "==";
	public Heading2Elements getHeading2Access() {
		return pHeading2;
	}
	
	public ParserRule getHeading2Rule() {
		return getHeading2Access().getRule();
	}

	//Heading3:
	//	"===" heading=FormattedText "===";
	public Heading3Elements getHeading3Access() {
		return pHeading3;
	}
	
	public ParserRule getHeading3Rule() {
		return getHeading3Access().getRule();
	}

	//Heading4:
	//	"====" heading=FormattedText "====";
	public Heading4Elements getHeading4Access() {
		return pHeading4;
	}
	
	public ParserRule getHeading4Rule() {
		return getHeading4Access().getRule();
	}

	//List:
	//	list=(OrderedList | UnorderedList);
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//OrderedList:
	//	items+=OrderedListItem;
	public OrderedListElements getOrderedListAccess() {
		return pOrderedList;
	}
	
	public ParserRule getOrderedListRule() {
		return getOrderedListAccess().getRule();
	}

	//UnorderedList:
	//	items+=UnorderedListItem;
	public UnorderedListElements getUnorderedListAccess() {
		return pUnorderedList;
	}
	
	public ParserRule getUnorderedListRule() {
		return getUnorderedListAccess().getRule();
	}

	//OrderedListItem:
	//	"#" item=(FormattedText | List);
	public OrderedListItemElements getOrderedListItemAccess() {
		return pOrderedListItem;
	}
	
	public ParserRule getOrderedListItemRule() {
		return getOrderedListItemAccess().getRule();
	}

	//UnorderedListItem:
	//	"*" item=(FormattedText | List);
	public UnorderedListItemElements getUnorderedListItemAccess() {
		return pUnorderedListItem;
	}
	
	public ParserRule getUnorderedListItemRule() {
		return getUnorderedListItemAccess().getRule();
	}

	//ItalicText:
	//	"\'\'" italicText=(InternalLink | ExternalLink | UnformattedText) "\'\'";
	public ItalicTextElements getItalicTextAccess() {
		return pItalicText;
	}
	
	public ParserRule getItalicTextRule() {
		return getItalicTextAccess().getRule();
	}

	//BoldText:
	//	"\'\'\'" boldText=(InternalLink | ExternalLink | UnformattedText) "\'\'\'";
	public BoldTextElements getBoldTextAccess() {
		return pBoldText;
	}
	
	public ParserRule getBoldTextRule() {
		return getBoldTextAccess().getRule();
	}

	//ItalicBoldText:
	//	"\'\'\'\'\'" italicBoldText=(InternalLink | ExternalLink | UnformattedText) "\'\'\'\'\'";
	public ItalicBoldTextElements getItalicBoldTextAccess() {
		return pItalicBoldText;
	}
	
	public ParserRule getItalicBoldTextRule() {
		return getItalicBoldTextAccess().getRule();
	}

	//BlockQuote:
	//	"<blockquote>" blockQuoteText=FormattedText additional+=FormattedText* "</blockquote>";
	public BlockQuoteElements getBlockQuoteAccess() {
		return pBlockQuote;
	}
	
	public ParserRule getBlockQuoteRule() {
		return getBlockQuoteAccess().getRule();
	}

	//ExternalLink:
	//	"[" linkName=UnformattedText (" " renamedLink=FormattedTextWithoutLinks)? "]";
	public ExternalLinkElements getExternalLinkAccess() {
		return pExternalLink;
	}
	
	public ParserRule getExternalLinkRule() {
		return getExternalLinkAccess().getRule();
	}

	//InternalLink:
	//	"[[" linkName=UnformattedText ("|" renamedLink=FormattedTextWithoutLinks)? "]]";
	public InternalLinkElements getInternalLinkAccess() {
		return pInternalLink;
	}
	
	public ParserRule getInternalLinkRule() {
		return getInternalLinkAccess().getRule();
	}

	//File:
	//	"[[File:" fileName=UnformattedText viewType=("|thumb" | "|frame" | "|frameless")? ("|" text=FormattedTextWithoutLinks
	//	additional+=FormattedTextWithoutLinks*)? "]]";
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//Category:
	//	"[[Category:" categoryLink=UnformattedText "|*"? "]]";
	public CategoryElements getCategoryAccess() {
		return pCategory;
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	//Template:
	//	"{{" template=TemplateType "}}";
	public TemplateElements getTemplateAccess() {
		return pTemplate;
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}

	//TemplateType:
	//	type=(Metadata | MainInformation);
	public TemplateTypeElements getTemplateTypeAccess() {
		return pTemplateType;
	}
	
	public ParserRule getTemplateTypeRule() {
		return getTemplateTypeAccess().getRule();
	}

	//Metadata:
	//	about=About actualInfo=ActualInformation?;
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}

	//About:
	//	"about|" aboutText=UnformattedText;
	public AboutElements getAboutAccess() {
		return pAbout;
	}
	
	public ParserRule getAboutRule() {
		return getAboutAccess().getRule();
	}

	//ActualInformation:
	//	"|" informationOnWhat=UnformattedText "|" link=UnformattedText ("|and|" additionalLinks+=UnformattedText)*;
	public ActualInformationElements getActualInformationAccess() {
		return pActualInformation;
	}
	
	public ParserRule getActualInformationRule() {
		return getActualInformationAccess().getRule();
	}

	//MainInformation:
	//	"main|" link=UnformattedText;
	public MainInformationElements getMainInformationAccess() {
		return pMainInformation;
	}
	
	public ParserRule getMainInformationRule() {
		return getMainInformationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
