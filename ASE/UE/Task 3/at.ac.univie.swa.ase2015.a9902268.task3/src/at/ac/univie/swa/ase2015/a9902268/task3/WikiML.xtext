grammar at.ac.univie.swa.ase2015.a9902268.task3.WikiML with org.eclipse.xtext.common.Terminals

generate wikiML "http://www.ac.at/univie/swa/ase2015/a9902268/task3/WikiML"

//TODO: implement formatting as terminals with exceptions. similar as for JAVADOC example here: https://www.eclipse.org/forums/index.php/t/490044/
WikiPage:
//according to wikitext documentation, one single title per page
	'=' name=Name '='
	//a page could potentially also exist without content
	elements+=ParagraphTypes*;

	//handle all types of paragraphs
//FIXME: this list needs to be ordered, from general cases to specifics
ParagraphTypes:
	OrderedList | UnorderedList | Image | Category | Template | AnyText |
	BlockQuote | Heading2 | Heading3 | Heading4 | Heading5 | Paragraph;

BlockQuote:
	{BlockQuote} '<blockquote>' (content=(AnyTextSequence)) '</blockquote>';

Template:
	AboutTemplate | QuoteTemplate | MainTemplate;

AboutTemplate:
	'{{' type='about' ('|' content+=AnyTextSequence)+ '}}';

MainTemplate:
	'{{' type='main' ('|' content+=AnyTextSequence)+ '}}';

QuoteTemplate:
	'{{' type='\'' '}}';


OrderedList:
	items+=(OrderListItem)+ end=Paragraph
;
UnorderedList:
	items+=(UnorderListItem)+ end=Paragraph
;

UnorderListItem:
	level=('*' | '**') itemtext=(AnyTextSequence);

OrderListItem:
	'#' itemtext=(AnyTextSequence);

	/*OrderList:
	'#' name=(AnyText) list=(AnyTextSequence) ':LIST';
*/
//TODO: terminal rule for filename and supported formats
/* Supported file types 
    jpg/jpeg – recommended for photographic images.
    svg – a vector format recommended for drawings and line-art illustration.
    png – recommended for non-vector iconic images.
    gif
*/
Image:
	'[[' 'File:' name=URL ('|' type=ViewType) ('|' hAlign=HorizontalAlign)? ('|alt='
	altText=AbstractUnformattedInlineContent)? '|' caption=(AnyTextSequence) ']]';

	//see display modes here: https://en.wikipedia.org/wiki/Help:Visual_file_markup, no displaymode = basic
enum ViewType:
	thumb='thumb' /*| thumbnail='thumbnail' | frame='frame' | framed='framed' | frameless='frameless'*/;

	//see alignment here: https://en.wikipedia.org/wiki/Help:Visual_file_markup, no displaymode = basic
enum HorizontalAlign:
	right='right'/*| left='left' | center='center' | none='none' */ ;

Category:
	'[[' 'Category:' name=Text value=('|*?')? ']]';

Heading2:
	'==' headingValue2=(AbstractUnformattedInlineContent) '==';

Heading3:
	'===' headingValue3=(AbstractUnformattedInlineContent) '===';

Heading4:
	'====' headingValue4=(AbstractUnformattedInlineContent) '====';

Heading5:
	'=====' headingValue5=(AbstractUnformattedInlineContent) '=====';

AbstractFormattedInlineContent:
	(Bold | Italic | ItalicBold);

Bold:
	'\'\'\'' name=AbstractUnformattedInlineContent '\'\'\'';

Italic:
	'\'\'' name=AbstractUnformattedInlineContent '\'\'';

ItalicBold:
	'\'\'\'\'\'' name=AbstractUnformattedInlineContent '\'\'\'\'\'';

	//UnformattedInlineContent
AbstractUnformattedInlineContent:
	(Text | HyperLink);

Text:
	name=Name;

HyperLink:
	(Internal | External);

Internal:
	{Internal} '[[' (link=[WikiPage|Name])? ('#' anchor=Text)? ('|' altText=(AbstractUnformattedInlineContent | AbstractFormattedInlineContent))?']]';


External:
	'[' name=URL (altText=(AbstractUnformattedInlineContent | AbstractFormattedInlineContent))? ']';


AnyTextSequence /*hidden()*/:
	{AnyTextSequence} content+=(AnyText)*;

AnyText:
	(AbstractFormattedInlineContent | AbstractUnformattedInlineContent);

Name:
	ID ( /*WS*/ ID)*;

Paragraph:
	paragraph='\r\n\r\n'
;

	//override of terminals

terminal ID:
	('A'..'Z' | 'a'..'z' | '_' | '-' | '(' | ')' | ','  | '"' | '.' | ':' | '0'..'9')*;

terminal STRING:
('A'..'Z' | 'a'..'z' | '_' | '-' | '(' | ')' | ','  | '"' | '.' | ':' | '0'..'9' )*
;

terminal ML_COMMENT :
'<!--' -> '-->' ;

//found online: https://xtexterience.wordpress.com/2011/06/08/urls-in-xtext/
terminal URL :
( 'a' .. 'z' ) + '://' // Protocol

( // Hostname
( ( '0' .. '9' ) + '.' ( '0' .. '9' ) + '.' ( '0' .. '9' ) + '.' ( '0' .. '9' ) + ) |
( ( 'a' .. 'z' | 'A' .. 'Z' )
( 'a' .. 'z' | 'A' .. 'Z' |
'0' .. '9' |
'$' |
'-' |
'_' |
( '\\'
( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ) |
( '%'
( '0' .. '9' )
( '0' .. '9' ) ) ) *
( '.'
( 'a' .. 'z' | 'A' .. 'Z' )
( 'a' .. 'z' | 'A' .. 'Z' |
'0' .. '9' |
'$' |
'-' |
'_' |
( '\\'
( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ) |
( '%'
( '0' .. '9' )
( '0' .. '9' ) ) ) * ) * ) )
( ':' ( '0' .. '9' ) + ) ? // Portnumber

( '/'
( 'a' .. 'z' | 'A' .. 'Z' |
'0' .. '9' |
'$' |
'-' |
'_' |
'~' |
'+' |
'.' |
( '\\'
( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ) |
( '%'
( '0' .. '9' )
( '0' .. '9' ) ) ) * ) * // Path

( '?'
( 'a' .. 'z' | 'A' .. 'Z' |
'0' .. '9' |
'$' |
'-' |
'_' |
'=' |
'&' |
';' |
( '\\'
( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ) |
( '%'
( '0' .. '9' )
( '0' .. '9' ) ) ) +
( '+'
( 'a' .. 'z' | 'A' .. 'Z' |
'0' .. '9' |
'$' |
'-' |
'_' |
'=' |
'&' |
';' |
( '\\'
( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ) |
( '%'
( '0' .. '9' )
( '0' .. '9' ) ) ) + ) * ) ? // Query
;
	