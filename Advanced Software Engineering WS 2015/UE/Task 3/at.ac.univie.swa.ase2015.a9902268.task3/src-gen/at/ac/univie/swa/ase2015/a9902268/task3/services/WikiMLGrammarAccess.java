/*
 * generated by Xtext
 */
package at.ac.univie.swa.ase2015.a9902268.task3.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WikiMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WikiMLPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WikiMLPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTitleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTitlePageTitleParserRuleCall_0_0 = (RuleCall)cTitleAssignment_0.eContents().get(0);
		private final Assignment cSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSectionAbstractSectionParserRuleCall_1_0 = (RuleCall)cSectionAssignment_1.eContents().get(0);
		
		//WikiMLPage:
		//	title+=PageTitle section+=AbstractSection*;
		@Override public ParserRule getRule() { return rule; }

		//title+=PageTitle section+=AbstractSection*
		public Group getGroup() { return cGroup; }

		//title+=PageTitle
		public Assignment getTitleAssignment_0() { return cTitleAssignment_0; }

		//PageTitle
		public RuleCall getTitlePageTitleParserRuleCall_0_0() { return cTitlePageTitleParserRuleCall_0_0; }

		//section+=AbstractSection*
		public Assignment getSectionAssignment_1() { return cSectionAssignment_1; }

		//AbstractSection
		public RuleCall getSectionAbstractSectionParserRuleCall_1_0() { return cSectionAbstractSectionParserRuleCall_1_0; }
	}

	public class PageTitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageTitle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignControl000aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentAbstractParagraphParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//PageTitle:
		//	"=" name=TEXT "=\n" content+=AbstractParagraph*;
		@Override public ParserRule getRule() { return rule; }

		//"=" name=TEXT "=\n" content+=AbstractParagraph*
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//name=TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TEXT
		public RuleCall getNameTEXTTerminalRuleCall_1_0() { return cNameTEXTTerminalRuleCall_1_0; }

		//"=\n"
		public Keyword getEqualsSignControl000aKeyword_2() { return cEqualsSignControl000aKeyword_2; }

		//content+=AbstractParagraph*
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//AbstractParagraph
		public RuleCall getContentAbstractParagraphParserRuleCall_3_0() { return cContentAbstractParagraphParserRuleCall_3_0; }
	}

	public class AbstractSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubSectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubSubSectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubSubSubSectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractSection:
		//	SubSection | SubSubSection | SubSubSubSection;
		@Override public ParserRule getRule() { return rule; }

		//SubSection | SubSubSection | SubSubSubSection
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubSection
		public RuleCall getSubSectionParserRuleCall_0() { return cSubSectionParserRuleCall_0; }

		//SubSubSection
		public RuleCall getSubSubSectionParserRuleCall_1() { return cSubSubSectionParserRuleCall_1; }

		//SubSubSubSection
		public RuleCall getSubSubSubSectionParserRuleCall_2() { return cSubSubSubSectionParserRuleCall_2; }
	}

	public class SubSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignControl000aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentAbstractParagraphParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//SubSection:
		//	"==" name=TEXT "==\n" content+=AbstractParagraph*;
		@Override public ParserRule getRule() { return rule; }

		//"==" name=TEXT "==\n" content+=AbstractParagraph*
		public Group getGroup() { return cGroup; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//name=TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TEXT
		public RuleCall getNameTEXTTerminalRuleCall_1_0() { return cNameTEXTTerminalRuleCall_1_0; }

		//"==\n"
		public Keyword getEqualsSignEqualsSignControl000aKeyword_2() { return cEqualsSignEqualsSignControl000aKeyword_2; }

		//content+=AbstractParagraph*
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//AbstractParagraph
		public RuleCall getContentAbstractParagraphParserRuleCall_3_0() { return cContentAbstractParagraphParserRuleCall_3_0; }
	}

	public class SubSubSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubSubSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignControl000aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentAbstractParagraphParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//SubSubSection:
		//	"===" name=TEXT "===\n" content+=AbstractParagraph*;
		@Override public ParserRule getRule() { return rule; }

		//"===" name=TEXT "===\n" content+=AbstractParagraph*
		public Group getGroup() { return cGroup; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }

		//name=TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TEXT
		public RuleCall getNameTEXTTerminalRuleCall_1_0() { return cNameTEXTTerminalRuleCall_1_0; }

		//"===\n"
		public Keyword getEqualsSignEqualsSignEqualsSignControl000aKeyword_2() { return cEqualsSignEqualsSignEqualsSignControl000aKeyword_2; }

		//content+=AbstractParagraph*
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//AbstractParagraph
		public RuleCall getContentAbstractParagraphParserRuleCall_3_0() { return cContentAbstractParagraphParserRuleCall_3_0; }
	}

	public class SubSubSubSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubSubSubSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignEqualsSignControl000aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentAbstractParagraphParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//SubSubSubSection:
		//	"====" name=TEXT "====\n" content+=AbstractParagraph*;
		@Override public ParserRule getRule() { return rule; }

		//"====" name=TEXT "====\n" content+=AbstractParagraph*
		public Group getGroup() { return cGroup; }

		//"===="
		public Keyword getEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0; }

		//name=TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TEXT
		public RuleCall getNameTEXTTerminalRuleCall_1_0() { return cNameTEXTTerminalRuleCall_1_0; }

		//"====\n"
		public Keyword getEqualsSignEqualsSignEqualsSignEqualsSignControl000aKeyword_2() { return cEqualsSignEqualsSignEqualsSignEqualsSignControl000aKeyword_2; }

		//content+=AbstractParagraph*
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//AbstractParagraph
		public RuleCall getContentAbstractParagraphParserRuleCall_3_0() { return cContentAbstractParagraphParserRuleCall_3_0; }
	}

	public class AbstractParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractParagraph");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalParagraphParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoldParagraphParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cItalicParagraphParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractParagraph:
		//	NormalParagraph | BoldParagraph | ItalicParagraph;
		@Override public ParserRule getRule() { return rule; }

		//NormalParagraph | BoldParagraph | ItalicParagraph
		public Alternatives getAlternatives() { return cAlternatives; }

		//NormalParagraph
		public RuleCall getNormalParagraphParserRuleCall_0() { return cNormalParagraphParserRuleCall_0; }

		//BoldParagraph
		public RuleCall getBoldParagraphParserRuleCall_1() { return cBoldParagraphParserRuleCall_1; }

		//ItalicParagraph
		public RuleCall getItalicParagraphParserRuleCall_2() { return cItalicParagraphParserRuleCall_2; }
	}

	public class NormalParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalParagraph");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTEXTTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NormalParagraph:
		//	name=TEXT;
		@Override public ParserRule getRule() { return rule; }

		//name=TEXT
		public Assignment getNameAssignment() { return cNameAssignment; }

		//TEXT
		public RuleCall getNameTEXTTerminalRuleCall_0() { return cNameTEXTTerminalRuleCall_0; }
	}

	public class BoldParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoldParagraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheApostropheApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNormalParagraphParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cApostropheApostropheApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BoldParagraph:
		//	"\'\'\'" NormalParagraph "\'\'\'";
		@Override public ParserRule getRule() { return rule; }

		//"\'\'\'" NormalParagraph "\'\'\'"
		public Group getGroup() { return cGroup; }

		//"\'\'\'"
		public Keyword getApostropheApostropheApostropheKeyword_0() { return cApostropheApostropheApostropheKeyword_0; }

		//NormalParagraph
		public RuleCall getNormalParagraphParserRuleCall_1() { return cNormalParagraphParserRuleCall_1; }

		//"\'\'\'"
		public Keyword getApostropheApostropheApostropheKeyword_2() { return cApostropheApostropheApostropheKeyword_2; }
	}

	public class ItalicParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItalicParagraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNormalParagraphParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cApostropheApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ItalicParagraph:
		//	"\'\'" NormalParagraph "\'\'";
		@Override public ParserRule getRule() { return rule; }

		//"\'\'" NormalParagraph "\'\'"
		public Group getGroup() { return cGroup; }

		//"\'\'"
		public Keyword getApostropheApostropheKeyword_0() { return cApostropheApostropheKeyword_0; }

		//NormalParagraph
		public RuleCall getNormalParagraphParserRuleCall_1() { return cNormalParagraphParserRuleCall_1; }

		//"\'\'"
		public Keyword getApostropheApostropheKeyword_2() { return cApostropheApostropheKeyword_2; }
	}
	
	
	private final WikiMLPageElements pWikiMLPage;
	private final PageTitleElements pPageTitle;
	private final AbstractSectionElements pAbstractSection;
	private final SubSectionElements pSubSection;
	private final SubSubSectionElements pSubSubSection;
	private final SubSubSubSectionElements pSubSubSubSection;
	private final AbstractParagraphElements pAbstractParagraph;
	private final NormalParagraphElements pNormalParagraph;
	private final BoldParagraphElements pBoldParagraph;
	private final ItalicParagraphElements pItalicParagraph;
	private final TerminalRule tTEXT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WikiMLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWikiMLPage = new WikiMLPageElements();
		this.pPageTitle = new PageTitleElements();
		this.pAbstractSection = new AbstractSectionElements();
		this.pSubSection = new SubSectionElements();
		this.pSubSubSection = new SubSubSectionElements();
		this.pSubSubSubSection = new SubSubSubSectionElements();
		this.pAbstractParagraph = new AbstractParagraphElements();
		this.pNormalParagraph = new NormalParagraphElements();
		this.pBoldParagraph = new BoldParagraphElements();
		this.pItalicParagraph = new ItalicParagraphElements();
		this.tTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.univie.swa.ase2015.a9902268.task3.WikiML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//WikiMLPage:
	//	title+=PageTitle section+=AbstractSection*;
	public WikiMLPageElements getWikiMLPageAccess() {
		return pWikiMLPage;
	}
	
	public ParserRule getWikiMLPageRule() {
		return getWikiMLPageAccess().getRule();
	}

	//PageTitle:
	//	"=" name=TEXT "=\n" content+=AbstractParagraph*;
	public PageTitleElements getPageTitleAccess() {
		return pPageTitle;
	}
	
	public ParserRule getPageTitleRule() {
		return getPageTitleAccess().getRule();
	}

	//AbstractSection:
	//	SubSection | SubSubSection | SubSubSubSection;
	public AbstractSectionElements getAbstractSectionAccess() {
		return pAbstractSection;
	}
	
	public ParserRule getAbstractSectionRule() {
		return getAbstractSectionAccess().getRule();
	}

	//SubSection:
	//	"==" name=TEXT "==\n" content+=AbstractParagraph*;
	public SubSectionElements getSubSectionAccess() {
		return pSubSection;
	}
	
	public ParserRule getSubSectionRule() {
		return getSubSectionAccess().getRule();
	}

	//SubSubSection:
	//	"===" name=TEXT "===\n" content+=AbstractParagraph*;
	public SubSubSectionElements getSubSubSectionAccess() {
		return pSubSubSection;
	}
	
	public ParserRule getSubSubSectionRule() {
		return getSubSubSectionAccess().getRule();
	}

	//SubSubSubSection:
	//	"====" name=TEXT "====\n" content+=AbstractParagraph*;
	public SubSubSubSectionElements getSubSubSubSectionAccess() {
		return pSubSubSubSection;
	}
	
	public ParserRule getSubSubSubSectionRule() {
		return getSubSubSubSectionAccess().getRule();
	}

	//AbstractParagraph:
	//	NormalParagraph | BoldParagraph | ItalicParagraph;
	public AbstractParagraphElements getAbstractParagraphAccess() {
		return pAbstractParagraph;
	}
	
	public ParserRule getAbstractParagraphRule() {
		return getAbstractParagraphAccess().getRule();
	}

	//NormalParagraph:
	//	name=TEXT;
	public NormalParagraphElements getNormalParagraphAccess() {
		return pNormalParagraph;
	}
	
	public ParserRule getNormalParagraphRule() {
		return getNormalParagraphAccess().getRule();
	}

	//BoldParagraph:
	//	"\'\'\'" NormalParagraph "\'\'\'";
	public BoldParagraphElements getBoldParagraphAccess() {
		return pBoldParagraph;
	}
	
	public ParserRule getBoldParagraphRule() {
		return getBoldParagraphAccess().getRule();
	}

	//ItalicParagraph:
	//	"\'\'" NormalParagraph "\'\'";
	public ItalicParagraphElements getItalicParagraphAccess() {
		return pItalicParagraph;
	}
	
	public ParserRule getItalicParagraphRule() {
		return getItalicParagraphAccess().getRule();
	}

	////everything allowed but Umlaute
	//terminal TEXT:
	//	"^"? ("a".."z" | "A".."Z" | "_" | "0".."9" | " ")*;
	public TerminalRule getTEXTRule() {
		return tTEXT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
