/*
 * generated by Xtext
 */
package at.ac.univie.swa.ase2015.a9902268.task3.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WikiMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WikiPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WikiPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameHeading1ParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsParagraphTypesParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		////TODO: implement formatting as terminals with exceptions. similar as for JAVADOC example here: https://www.eclipse.org/forums/index.php/t/490044/
		//WikiPage: //according to wikitext documentation, one single title per page
		//	name=Heading1 //a page could potentially also exist without content
		//	elements+=ParagraphTypes*;
		@Override public ParserRule getRule() { return rule; }

		////according to wikitext documentation, one single title per page
		//name=Heading1 //a page could potentially also exist without content
		//elements+=ParagraphTypes*
		public Group getGroup() { return cGroup; }

		////according to wikitext documentation, one single title per page
		//name=Heading1
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Heading1
		public RuleCall getNameHeading1ParserRuleCall_0_0() { return cNameHeading1ParserRuleCall_0_0; }

		////a page could potentially also exist without content
		//elements+=ParagraphTypes*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//ParagraphTypes
		public RuleCall getElementsParagraphTypesParserRuleCall_1_0() { return cElementsParagraphTypesParserRuleCall_1_0; }
	}

	public class ParagraphTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParagraphTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrderListItemLevel1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnOrderListItemLevel1ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnOrderListItemLevel2ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cImageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCategoryParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTemplateParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAbstractFormattedInlineContentParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAbstractUnformattedInlineContentParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBlockQuoteParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cHeading1ParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cHeading2ParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cHeading3ParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cHeading4ParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cHeading5ParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		////handle all types of paragraphs
		////FIXME: this list needs to be ordered, from general cases to specifics
		//ParagraphTypes:
		//	OrderListItemLevel1 | UnOrderListItemLevel1 | UnOrderListItemLevel2 | Image | Category | Template |
		//	AbstractFormattedInlineContent | AbstractUnformattedInlineContent | BlockQuote | Heading1 | Heading2 | Heading3 |
		//	Heading4 | Heading5;
		@Override public ParserRule getRule() { return rule; }

		//OrderListItemLevel1 | UnOrderListItemLevel1 | UnOrderListItemLevel2 | Image | Category | Template |
		//AbstractFormattedInlineContent | AbstractUnformattedInlineContent | BlockQuote | Heading1 | Heading2 | Heading3 |
		//Heading4 | Heading5
		public Alternatives getAlternatives() { return cAlternatives; }

		//OrderListItemLevel1
		public RuleCall getOrderListItemLevel1ParserRuleCall_0() { return cOrderListItemLevel1ParserRuleCall_0; }

		//UnOrderListItemLevel1
		public RuleCall getUnOrderListItemLevel1ParserRuleCall_1() { return cUnOrderListItemLevel1ParserRuleCall_1; }

		//UnOrderListItemLevel2
		public RuleCall getUnOrderListItemLevel2ParserRuleCall_2() { return cUnOrderListItemLevel2ParserRuleCall_2; }

		//Image
		public RuleCall getImageParserRuleCall_3() { return cImageParserRuleCall_3; }

		//Category
		public RuleCall getCategoryParserRuleCall_4() { return cCategoryParserRuleCall_4; }

		//Template
		public RuleCall getTemplateParserRuleCall_5() { return cTemplateParserRuleCall_5; }

		//AbstractFormattedInlineContent
		public RuleCall getAbstractFormattedInlineContentParserRuleCall_6() { return cAbstractFormattedInlineContentParserRuleCall_6; }

		//AbstractUnformattedInlineContent
		public RuleCall getAbstractUnformattedInlineContentParserRuleCall_7() { return cAbstractUnformattedInlineContentParserRuleCall_7; }

		//BlockQuote
		public RuleCall getBlockQuoteParserRuleCall_8() { return cBlockQuoteParserRuleCall_8; }

		//Heading1
		public RuleCall getHeading1ParserRuleCall_9() { return cHeading1ParserRuleCall_9; }

		//Heading2
		public RuleCall getHeading2ParserRuleCall_10() { return cHeading2ParserRuleCall_10; }

		//Heading3
		public RuleCall getHeading3ParserRuleCall_11() { return cHeading3ParserRuleCall_11; }

		//Heading4
		public RuleCall getHeading4ParserRuleCall_12() { return cHeading4ParserRuleCall_12; }

		//Heading5
		public RuleCall getHeading5ParserRuleCall_13() { return cHeading5ParserRuleCall_13; }
	}

	public class BlockQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockQuote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockQuoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBlockquoteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentAnyTextSequenceParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cBlockquoteKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockQuote:
		//	{BlockQuote} "<blockquote>" content=AnyTextSequence "</blockquote>";
		@Override public ParserRule getRule() { return rule; }

		//{BlockQuote} "<blockquote>" content=AnyTextSequence "</blockquote>"
		public Group getGroup() { return cGroup; }

		//{BlockQuote}
		public Action getBlockQuoteAction_0() { return cBlockQuoteAction_0; }

		//"<blockquote>"
		public Keyword getBlockquoteKeyword_1() { return cBlockquoteKeyword_1; }

		//content=AnyTextSequence
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//AnyTextSequence
		public RuleCall getContentAnyTextSequenceParserRuleCall_2_0() { return cContentAnyTextSequenceParserRuleCall_2_0; }

		//"</blockquote>"
		public Keyword getBlockquoteKeyword_3() { return cBlockquoteKeyword_3; }
	}

	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentTextParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cContentTextParserRuleCall_2_1_0 = (RuleCall)cContentAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////TODO Check how Templates work
		//Template:
		//	"{{" content+=Text ("|" content+=Text)+ "}}";
		@Override public ParserRule getRule() { return rule; }

		//"{{" content+=Text ("|" content+=Text)+ "}}"
		public Group getGroup() { return cGroup; }

		//"{{"
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketLeftCurlyBracketKeyword_0; }

		//content+=Text
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//Text
		public RuleCall getContentTextParserRuleCall_1_0() { return cContentTextParserRuleCall_1_0; }

		//("|" content+=Text)+
		public Group getGroup_2() { return cGroup_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//content+=Text
		public Assignment getContentAssignment_2_1() { return cContentAssignment_2_1; }

		//Text
		public RuleCall getContentTextParserRuleCall_2_1_0() { return cContentTextParserRuleCall_2_1_0; }

		//"}}"
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_3() { return cRightCurlyBracketRightCurlyBracketKeyword_3; }
	}

	public class UnOrderListItemLevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnOrderListItemLevel2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAnyTextParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListAnyTextSequenceParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cLISTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnOrderListItemLevel2:
		//	"**" name=AnyText list=AnyTextSequence ":LIST";
		@Override public ParserRule getRule() { return rule; }

		//"**" name=AnyText list=AnyTextSequence ":LIST"
		public Group getGroup() { return cGroup; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_0() { return cAsteriskAsteriskKeyword_0; }

		//name=AnyText
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AnyText
		public RuleCall getNameAnyTextParserRuleCall_1_0() { return cNameAnyTextParserRuleCall_1_0; }

		//list=AnyTextSequence
		public Assignment getListAssignment_2() { return cListAssignment_2; }

		//AnyTextSequence
		public RuleCall getListAnyTextSequenceParserRuleCall_2_0() { return cListAnyTextSequenceParserRuleCall_2_0; }

		//":LIST"
		public Keyword getLISTKeyword_3() { return cLISTKeyword_3; }
	}

	public class UnOrderListItemLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnOrderListItemLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAnyTextParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListAnyTextSequenceParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cLISTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnOrderListItemLevel1:
		//	"*" name=AnyText list=AnyTextSequence ":LIST";
		@Override public ParserRule getRule() { return rule; }

		//"*" name=AnyText list=AnyTextSequence ":LIST"
		public Group getGroup() { return cGroup; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//name=AnyText
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AnyText
		public RuleCall getNameAnyTextParserRuleCall_1_0() { return cNameAnyTextParserRuleCall_1_0; }

		//list=AnyTextSequence
		public Assignment getListAssignment_2() { return cListAssignment_2; }

		//AnyTextSequence
		public RuleCall getListAnyTextSequenceParserRuleCall_2_0() { return cListAnyTextSequenceParserRuleCall_2_0; }

		//":LIST"
		public Keyword getLISTKeyword_3() { return cLISTKeyword_3; }
	}

	public class OrderListItemLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderListItemLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAnyTextParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListAnyTextSequenceParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cLISTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OrderListItemLevel1:
		//	"#" name=AnyText list=AnyTextSequence ":LIST";
		@Override public ParserRule getRule() { return rule; }

		//"#" name=AnyText list=AnyTextSequence ":LIST"
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//name=AnyText
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AnyText
		public RuleCall getNameAnyTextParserRuleCall_1_0() { return cNameAnyTextParserRuleCall_1_0; }

		//list=AnyTextSequence
		public Assignment getListAssignment_2() { return cListAssignment_2; }

		//AnyTextSequence
		public RuleCall getListAnyTextSequenceParserRuleCall_2_0() { return cListAnyTextSequenceParserRuleCall_2_0; }

		//":LIST"
		public Keyword getLISTKeyword_3() { return cLISTKeyword_3; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTextParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeViewTypeEnumRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cHAlignAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cHAlignHorizontalAlignEnumRuleCall_4_1_0 = (RuleCall)cHAlignAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAltKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAltTextAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAltTextAbstractUnformattedInlineContentParserRuleCall_5_1_0 = (RuleCall)cAltTextAssignment_5_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCaptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCaptionAnyTextSequenceParserRuleCall_7_0 = (RuleCall)cCaptionAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////TODO: terminal rule for filename and supported formats
		/// * Supported file types 
		//    jpg/jpeg – recommended for photographic images.
		//    svg – a vector format recommended for drawings and line-art illustration.
		//    png – recommended for non-vector iconic images.
		//    gif
		// * / Image:
		//	"[[" "File:" name=Text ("|" type=ViewType)? ("|" hAlign=HorizontalAlign)? ("|alt="
		//	altText=AbstractUnformattedInlineContent)? "|" caption=AnyTextSequence "]]";
		@Override public ParserRule getRule() { return rule; }

		//"[[" "File:" name=Text ("|" type=ViewType)? ("|" hAlign=HorizontalAlign)? ("|alt="
		//altText=AbstractUnformattedInlineContent)? "|" caption=AnyTextSequence "]]"
		public Group getGroup() { return cGroup; }

		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }

		//"File:"
		public Keyword getFileKeyword_1() { return cFileKeyword_1; }

		//name=Text
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Text
		public RuleCall getNameTextParserRuleCall_2_0() { return cNameTextParserRuleCall_2_0; }

		//("|" type=ViewType)?
		public Group getGroup_3() { return cGroup_3; }

		//"|"
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }

		//type=ViewType
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//ViewType
		public RuleCall getTypeViewTypeEnumRuleCall_3_1_0() { return cTypeViewTypeEnumRuleCall_3_1_0; }

		//("|" hAlign=HorizontalAlign)?
		public Group getGroup_4() { return cGroup_4; }

		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }

		//hAlign=HorizontalAlign
		public Assignment getHAlignAssignment_4_1() { return cHAlignAssignment_4_1; }

		//HorizontalAlign
		public RuleCall getHAlignHorizontalAlignEnumRuleCall_4_1_0() { return cHAlignHorizontalAlignEnumRuleCall_4_1_0; }

		//("|alt=" altText=AbstractUnformattedInlineContent)?
		public Group getGroup_5() { return cGroup_5; }

		//"|alt="
		public Keyword getAltKeyword_5_0() { return cAltKeyword_5_0; }

		//altText=AbstractUnformattedInlineContent
		public Assignment getAltTextAssignment_5_1() { return cAltTextAssignment_5_1; }

		//AbstractUnformattedInlineContent
		public RuleCall getAltTextAbstractUnformattedInlineContentParserRuleCall_5_1_0() { return cAltTextAbstractUnformattedInlineContentParserRuleCall_5_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_6() { return cVerticalLineKeyword_6; }

		//caption=AnyTextSequence
		public Assignment getCaptionAssignment_7() { return cCaptionAssignment_7; }

		//AnyTextSequence
		public RuleCall getCaptionAnyTextSequenceParserRuleCall_7_0() { return cCaptionAnyTextSequenceParserRuleCall_7_0; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_8() { return cRightSquareBracketRightSquareBracketKeyword_8; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCategoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTextParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cValueVerticalLineAsteriskQuestionMarkKeyword_3_0 = (Keyword)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Category:
		//	"[[" "Category:" name=Text value="|*?"? "]]";
		@Override public ParserRule getRule() { return rule; }

		//"[[" "Category:" name=Text value="|*?"? "]]"
		public Group getGroup() { return cGroup; }

		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }

		//"Category:"
		public Keyword getCategoryKeyword_1() { return cCategoryKeyword_1; }

		//name=Text
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Text
		public RuleCall getNameTextParserRuleCall_2_0() { return cNameTextParserRuleCall_2_0; }

		//value="|*?"?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//"|*?"
		public Keyword getValueVerticalLineAsteriskQuestionMarkKeyword_3_0() { return cValueVerticalLineAsteriskQuestionMarkKeyword_3_0; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_4() { return cRightSquareBracketRightSquareBracketKeyword_4; }
	}

	public class Heading1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadingValue1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingValue1TextParserRuleCall_1_0 = (RuleCall)cHeadingValue1Assignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading1:
		//	"=" headingValue1=Text "=";
		@Override public ParserRule getRule() { return rule; }

		//"=" headingValue1=Text "="
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//headingValue1=Text
		public Assignment getHeadingValue1Assignment_1() { return cHeadingValue1Assignment_1; }

		//Text
		public RuleCall getHeadingValue1TextParserRuleCall_1_0() { return cHeadingValue1TextParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
	}

	public class Heading2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadingValue2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingValue2AbstractUnformattedInlineContentParserRuleCall_1_0 = (RuleCall)cHeadingValue2Assignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading2:
		//	"==" headingValue2=AbstractUnformattedInlineContent "==";
		@Override public ParserRule getRule() { return rule; }

		//"==" headingValue2=AbstractUnformattedInlineContent "=="
		public Group getGroup() { return cGroup; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//headingValue2=AbstractUnformattedInlineContent
		public Assignment getHeadingValue2Assignment_1() { return cHeadingValue2Assignment_1; }

		//AbstractUnformattedInlineContent
		public RuleCall getHeadingValue2AbstractUnformattedInlineContentParserRuleCall_1_0() { return cHeadingValue2AbstractUnformattedInlineContentParserRuleCall_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
	}

	public class Heading3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadingValue3Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingValue3AbstractUnformattedInlineContentParserRuleCall_1_0 = (RuleCall)cHeadingValue3Assignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading3:
		//	"===" headingValue3=AbstractUnformattedInlineContent "===";
		@Override public ParserRule getRule() { return rule; }

		//"===" headingValue3=AbstractUnformattedInlineContent "==="
		public Group getGroup() { return cGroup; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }

		//headingValue3=AbstractUnformattedInlineContent
		public Assignment getHeadingValue3Assignment_1() { return cHeadingValue3Assignment_1; }

		//AbstractUnformattedInlineContent
		public RuleCall getHeadingValue3AbstractUnformattedInlineContentParserRuleCall_1_0() { return cHeadingValue3AbstractUnformattedInlineContentParserRuleCall_1_0; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }
	}

	public class Heading4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadingValue4Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingValue4AbstractUnformattedInlineContentParserRuleCall_1_0 = (RuleCall)cHeadingValue4Assignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading4:
		//	"====" headingValue4=AbstractUnformattedInlineContent "====";
		@Override public ParserRule getRule() { return rule; }

		//"====" headingValue4=AbstractUnformattedInlineContent "===="
		public Group getGroup() { return cGroup; }

		//"===="
		public Keyword getEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0; }

		//headingValue4=AbstractUnformattedInlineContent
		public Assignment getHeadingValue4Assignment_1() { return cHeadingValue4Assignment_1; }

		//AbstractUnformattedInlineContent
		public RuleCall getHeadingValue4AbstractUnformattedInlineContentParserRuleCall_1_0() { return cHeadingValue4AbstractUnformattedInlineContentParserRuleCall_1_0; }

		//"===="
		public Keyword getEqualsSignEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignEqualsSignKeyword_2; }
	}

	public class Heading5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadingValue5Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingValue5AbstractUnformattedInlineContentParserRuleCall_1_0 = (RuleCall)cHeadingValue5Assignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading5:
		//	"=====" headingValue5=AbstractUnformattedInlineContent "=====";
		@Override public ParserRule getRule() { return rule; }

		//"=====" headingValue5=AbstractUnformattedInlineContent "====="
		public Group getGroup() { return cGroup; }

		//"====="
		public Keyword getEqualsSignEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0; }

		//headingValue5=AbstractUnformattedInlineContent
		public Assignment getHeadingValue5Assignment_1() { return cHeadingValue5Assignment_1; }

		//AbstractUnformattedInlineContent
		public RuleCall getHeadingValue5AbstractUnformattedInlineContentParserRuleCall_1_0() { return cHeadingValue5AbstractUnformattedInlineContentParserRuleCall_1_0; }

		//"====="
		public Keyword getEqualsSignEqualsSignEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignEqualsSignEqualsSignKeyword_2; }
	}

	public class AbstractFormattedInlineContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractFormattedInlineContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cItalicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cItalicBoldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractFormattedInlineContent:
		//	Bold | Italic | ItalicBold;
		@Override public ParserRule getRule() { return rule; }

		//Bold | Italic | ItalicBold
		public Alternatives getAlternatives() { return cAlternatives; }

		//Bold
		public RuleCall getBoldParserRuleCall_0() { return cBoldParserRuleCall_0; }

		//Italic
		public RuleCall getItalicParserRuleCall_1() { return cItalicParserRuleCall_1; }

		//ItalicBold
		public RuleCall getItalicBoldParserRuleCall_2() { return cItalicBoldParserRuleCall_2; }
	}

	public class BoldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheApostropheApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAbstractUnformattedInlineContentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Bold:
		//	"\'\'\'" name=AbstractUnformattedInlineContent "\'\'\'";
		@Override public ParserRule getRule() { return rule; }

		//"\'\'\'" name=AbstractUnformattedInlineContent "\'\'\'"
		public Group getGroup() { return cGroup; }

		//"\'\'\'"
		public Keyword getApostropheApostropheApostropheKeyword_0() { return cApostropheApostropheApostropheKeyword_0; }

		//name=AbstractUnformattedInlineContent
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AbstractUnformattedInlineContent
		public RuleCall getNameAbstractUnformattedInlineContentParserRuleCall_1_0() { return cNameAbstractUnformattedInlineContentParserRuleCall_1_0; }

		//"\'\'\'"
		public Keyword getApostropheApostropheApostropheKeyword_2() { return cApostropheApostropheApostropheKeyword_2; }
	}

	public class ItalicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Italic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAbstractUnformattedInlineContentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cApostropheApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Italic:
		//	"\'\'" name=AbstractUnformattedInlineContent "\'\'";
		@Override public ParserRule getRule() { return rule; }

		//"\'\'" name=AbstractUnformattedInlineContent "\'\'"
		public Group getGroup() { return cGroup; }

		//"\'\'"
		public Keyword getApostropheApostropheKeyword_0() { return cApostropheApostropheKeyword_0; }

		//name=AbstractUnformattedInlineContent
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AbstractUnformattedInlineContent
		public RuleCall getNameAbstractUnformattedInlineContentParserRuleCall_1_0() { return cNameAbstractUnformattedInlineContentParserRuleCall_1_0; }

		//"\'\'"
		public Keyword getApostropheApostropheKeyword_2() { return cApostropheApostropheKeyword_2; }
	}

	public class ItalicBoldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItalicBold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheApostropheApostropheApostropheApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAbstractUnformattedInlineContentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheApostropheApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ItalicBold:
		//	"\'\'\'\'\'" name=AbstractUnformattedInlineContent "\'\'\'\'\'";
		@Override public ParserRule getRule() { return rule; }

		//"\'\'\'\'\'" name=AbstractUnformattedInlineContent "\'\'\'\'\'"
		public Group getGroup() { return cGroup; }

		//"\'\'\'\'\'"
		public Keyword getApostropheApostropheApostropheApostropheApostropheKeyword_0() { return cApostropheApostropheApostropheApostropheApostropheKeyword_0; }

		//name=AbstractUnformattedInlineContent
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AbstractUnformattedInlineContent
		public RuleCall getNameAbstractUnformattedInlineContentParserRuleCall_1_0() { return cNameAbstractUnformattedInlineContentParserRuleCall_1_0; }

		//"\'\'\'\'\'"
		public Keyword getApostropheApostropheApostropheApostropheApostropheKeyword_2() { return cApostropheApostropheApostropheApostropheApostropheKeyword_2; }
	}

	public class AbstractUnformattedInlineContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractUnformattedInlineContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHyperLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////UnformattedInlineContent
		//AbstractUnformattedInlineContent:
		//	Text | HyperLink;
		@Override public ParserRule getRule() { return rule; }

		//Text | HyperLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//Text
		public RuleCall getTextParserRuleCall_0() { return cTextParserRuleCall_0; }

		//HyperLink
		public RuleCall getHyperLinkParserRuleCall_1() { return cHyperLinkParserRuleCall_1; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Text:
		//	name=Name;
		@Override public ParserRule getRule() { return rule; }

		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class HyperLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HyperLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInternalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInternalAltParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExternalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExternalAltParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//HyperLink:
		//	Internal | InternalAlt | External | ExternalAlt;
		@Override public ParserRule getRule() { return rule; }

		//Internal | InternalAlt | External | ExternalAlt
		public Alternatives getAlternatives() { return cAlternatives; }

		//Internal
		public RuleCall getInternalParserRuleCall_0() { return cInternalParserRuleCall_0; }

		//InternalAlt
		public RuleCall getInternalAltParserRuleCall_1() { return cInternalAltParserRuleCall_1; }

		//External
		public RuleCall getExternalParserRuleCall_2() { return cExternalParserRuleCall_2; }

		//ExternalAlt
		public RuleCall getExternalAltParserRuleCall_3() { return cExternalAltParserRuleCall_3; }
	}

	public class InternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Internal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTextParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Internal:
		//	"[[" name=Text "]]";
		@Override public ParserRule getRule() { return rule; }

		//"[[" name=Text "]]"
		public Group getGroup() { return cGroup; }

		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }

		//name=Text
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Text
		public RuleCall getNameTextParserRuleCall_1_0() { return cNameTextParserRuleCall_1_0; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_2() { return cRightSquareBracketRightSquareBracketKeyword_2; }
	}

	public class InternalAltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalAlt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTextParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAltTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cAltTextAlternatives_3_0 = (Alternatives)cAltTextAssignment_3.eContents().get(0);
		private final RuleCall cAltTextAbstractUnformattedInlineContentParserRuleCall_3_0_0 = (RuleCall)cAltTextAlternatives_3_0.eContents().get(0);
		private final RuleCall cAltTextAbstractFormattedInlineContentParserRuleCall_3_0_1 = (RuleCall)cAltTextAlternatives_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InternalAlt:
		//	"[[" name=Text "|" altText=(AbstractUnformattedInlineContent | AbstractFormattedInlineContent) "]]";
		@Override public ParserRule getRule() { return rule; }

		//"[[" name=Text "|" altText=(AbstractUnformattedInlineContent | AbstractFormattedInlineContent) "]]"
		public Group getGroup() { return cGroup; }

		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }

		//name=Text
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Text
		public RuleCall getNameTextParserRuleCall_1_0() { return cNameTextParserRuleCall_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }

		//altText=(AbstractUnformattedInlineContent | AbstractFormattedInlineContent)
		public Assignment getAltTextAssignment_3() { return cAltTextAssignment_3; }

		//AbstractUnformattedInlineContent | AbstractFormattedInlineContent
		public Alternatives getAltTextAlternatives_3_0() { return cAltTextAlternatives_3_0; }

		//AbstractUnformattedInlineContent
		public RuleCall getAltTextAbstractUnformattedInlineContentParserRuleCall_3_0_0() { return cAltTextAbstractUnformattedInlineContentParserRuleCall_3_0_0; }

		//AbstractFormattedInlineContent
		public RuleCall getAltTextAbstractFormattedInlineContentParserRuleCall_3_0_1() { return cAltTextAbstractFormattedInlineContentParserRuleCall_3_0_1; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_4() { return cRightSquareBracketRightSquareBracketKeyword_4; }
	}

	public class ExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "External");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameURLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//External:
		//	"[" name=URL "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" name=URL "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//name=URL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//URL
		public RuleCall getNameURLTerminalRuleCall_1_0() { return cNameURLTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class ExternalAltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalAlt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameURLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAltTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAltTextAlternatives_2_0 = (Alternatives)cAltTextAssignment_2.eContents().get(0);
		private final RuleCall cAltTextAbstractUnformattedInlineContentParserRuleCall_2_0_0 = (RuleCall)cAltTextAlternatives_2_0.eContents().get(0);
		private final RuleCall cAltTextAbstractFormattedInlineContentParserRuleCall_2_0_1 = (RuleCall)cAltTextAlternatives_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExternalAlt:
		//	"[" name=URL altText=(AbstractUnformattedInlineContent | AbstractFormattedInlineContent) "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" name=URL altText=(AbstractUnformattedInlineContent | AbstractFormattedInlineContent) "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//name=URL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//URL
		public RuleCall getNameURLTerminalRuleCall_1_0() { return cNameURLTerminalRuleCall_1_0; }

		//altText=(AbstractUnformattedInlineContent | AbstractFormattedInlineContent)
		public Assignment getAltTextAssignment_2() { return cAltTextAssignment_2; }

		//AbstractUnformattedInlineContent | AbstractFormattedInlineContent
		public Alternatives getAltTextAlternatives_2_0() { return cAltTextAlternatives_2_0; }

		//AbstractUnformattedInlineContent
		public RuleCall getAltTextAbstractUnformattedInlineContentParserRuleCall_2_0_0() { return cAltTextAbstractUnformattedInlineContentParserRuleCall_2_0_0; }

		//AbstractFormattedInlineContent
		public RuleCall getAltTextAbstractFormattedInlineContentParserRuleCall_2_0_1() { return cAltTextAbstractFormattedInlineContentParserRuleCall_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AnyTextSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyTextSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnyTextSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentAnyTextParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		
		/// *hidden()* / AnyTextSequence:
		//	{AnyTextSequence} content+=AnyText*;
		@Override public ParserRule getRule() { return rule; }

		//{AnyTextSequence} content+=AnyText*
		public Group getGroup() { return cGroup; }

		//{AnyTextSequence}
		public Action getAnyTextSequenceAction_0() { return cAnyTextSequenceAction_0; }

		//content+=AnyText*
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//AnyText
		public RuleCall getContentAnyTextParserRuleCall_1_0() { return cContentAnyTextParserRuleCall_1_0; }
	}

	public class AnyTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyText");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameAbstractFormattedInlineContentParserRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameAbstractUnformattedInlineContentParserRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		
		//AnyText:
		//	name=(AbstractFormattedInlineContent | AbstractUnformattedInlineContent);
		@Override public ParserRule getRule() { return rule; }

		//name=(AbstractFormattedInlineContent | AbstractUnformattedInlineContent)
		public Assignment getNameAssignment() { return cNameAssignment; }

		//AbstractFormattedInlineContent | AbstractUnformattedInlineContent
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//AbstractFormattedInlineContent
		public RuleCall getNameAbstractFormattedInlineContentParserRuleCall_0_0() { return cNameAbstractFormattedInlineContentParserRuleCall_0_0; }

		//AbstractUnformattedInlineContent
		public RuleCall getNameAbstractUnformattedInlineContentParserRuleCall_0_1() { return cNameAbstractUnformattedInlineContentParserRuleCall_0_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Name:
		//	ID / *WS* / ID*;
		@Override public ParserRule getRule() { return rule; }

		//ID / *WS* / ID*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		/// *WS* / ID*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	public class ViewTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ViewType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cThumbEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cThumbThumbKeyword_0_0 = (Keyword)cThumbEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cThumbnailEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cThumbnailThumbnailKeyword_1_0 = (Keyword)cThumbnailEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFrameEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFrameFrameKeyword_2_0 = (Keyword)cFrameEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFramedEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFramedFramedKeyword_3_0 = (Keyword)cFramedEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFramelessEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFramelessFramelessKeyword_4_0 = (Keyword)cFramelessEnumLiteralDeclaration_4.eContents().get(0);
		
		////see display modes here: https://en.wikipedia.org/wiki/Help:Visual_file_markup, no displaymode = basic
		//enum ViewType:
		//	thumb | thumbnail | frame | framed | frameless;
		public EnumRule getRule() { return rule; }

		//thumb | thumbnail | frame | framed | frameless
		public Alternatives getAlternatives() { return cAlternatives; }

		//thumb
		public EnumLiteralDeclaration getThumbEnumLiteralDeclaration_0() { return cThumbEnumLiteralDeclaration_0; }

		//"thumb"
		public Keyword getThumbThumbKeyword_0_0() { return cThumbThumbKeyword_0_0; }

		//thumbnail
		public EnumLiteralDeclaration getThumbnailEnumLiteralDeclaration_1() { return cThumbnailEnumLiteralDeclaration_1; }

		//"thumbnail"
		public Keyword getThumbnailThumbnailKeyword_1_0() { return cThumbnailThumbnailKeyword_1_0; }

		//frame
		public EnumLiteralDeclaration getFrameEnumLiteralDeclaration_2() { return cFrameEnumLiteralDeclaration_2; }

		//"frame"
		public Keyword getFrameFrameKeyword_2_0() { return cFrameFrameKeyword_2_0; }

		//framed
		public EnumLiteralDeclaration getFramedEnumLiteralDeclaration_3() { return cFramedEnumLiteralDeclaration_3; }

		//"framed"
		public Keyword getFramedFramedKeyword_3_0() { return cFramedFramedKeyword_3_0; }

		//frameless
		public EnumLiteralDeclaration getFramelessEnumLiteralDeclaration_4() { return cFramelessEnumLiteralDeclaration_4; }

		//"frameless"
		public Keyword getFramelessFramelessKeyword_4_0() { return cFramelessFramelessKeyword_4_0; }
	}

	public class HorizontalAlignElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "HorizontalAlign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRightRightKeyword_0_0 = (Keyword)cRightEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLeftLeftKeyword_1_0 = (Keyword)cLeftEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCenterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCenterCenterKeyword_2_0 = (Keyword)cCenterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNoneNoneKeyword_3_0 = (Keyword)cNoneEnumLiteralDeclaration_3.eContents().get(0);
		
		////see alignment here: https://en.wikipedia.org/wiki/Help:Visual_file_markup, no displaymode = basic
		//enum HorizontalAlign:
		//	right | left | center | none;
		public EnumRule getRule() { return rule; }

		//right | left | center | none
		public Alternatives getAlternatives() { return cAlternatives; }

		//right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_0() { return cRightEnumLiteralDeclaration_0; }

		//"right"
		public Keyword getRightRightKeyword_0_0() { return cRightRightKeyword_0_0; }

		//left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_1() { return cLeftEnumLiteralDeclaration_1; }

		//"left"
		public Keyword getLeftLeftKeyword_1_0() { return cLeftLeftKeyword_1_0; }

		//center
		public EnumLiteralDeclaration getCenterEnumLiteralDeclaration_2() { return cCenterEnumLiteralDeclaration_2; }

		//"center"
		public Keyword getCenterCenterKeyword_2_0() { return cCenterCenterKeyword_2_0; }

		//none
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_3() { return cNoneEnumLiteralDeclaration_3; }

		//"none"
		public Keyword getNoneNoneKeyword_3_0() { return cNoneNoneKeyword_3_0; }
	}
	
	private final WikiPageElements pWikiPage;
	private final ParagraphTypesElements pParagraphTypes;
	private final BlockQuoteElements pBlockQuote;
	private final TemplateElements pTemplate;
	private final UnOrderListItemLevel2Elements pUnOrderListItemLevel2;
	private final UnOrderListItemLevel1Elements pUnOrderListItemLevel1;
	private final OrderListItemLevel1Elements pOrderListItemLevel1;
	private final ImageElements pImage;
	private final ViewTypeElements unknownRuleViewType;
	private final HorizontalAlignElements unknownRuleHorizontalAlign;
	private final CategoryElements pCategory;
	private final Heading1Elements pHeading1;
	private final Heading2Elements pHeading2;
	private final Heading3Elements pHeading3;
	private final Heading4Elements pHeading4;
	private final Heading5Elements pHeading5;
	private final AbstractFormattedInlineContentElements pAbstractFormattedInlineContent;
	private final BoldElements pBold;
	private final ItalicElements pItalic;
	private final ItalicBoldElements pItalicBold;
	private final AbstractUnformattedInlineContentElements pAbstractUnformattedInlineContent;
	private final TextElements pText;
	private final HyperLinkElements pHyperLink;
	private final InternalElements pInternal;
	private final InternalAltElements pInternalAlt;
	private final ExternalElements pExternal;
	private final ExternalAltElements pExternalAlt;
	private final AnyTextSequenceElements pAnyTextSequence;
	private final AnyTextElements pAnyText;
	private final NameElements pName;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSTRING;
	private final TerminalRule tURL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WikiMLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWikiPage = new WikiPageElements();
		this.pParagraphTypes = new ParagraphTypesElements();
		this.pBlockQuote = new BlockQuoteElements();
		this.pTemplate = new TemplateElements();
		this.pUnOrderListItemLevel2 = new UnOrderListItemLevel2Elements();
		this.pUnOrderListItemLevel1 = new UnOrderListItemLevel1Elements();
		this.pOrderListItemLevel1 = new OrderListItemLevel1Elements();
		this.pImage = new ImageElements();
		this.unknownRuleViewType = new ViewTypeElements();
		this.unknownRuleHorizontalAlign = new HorizontalAlignElements();
		this.pCategory = new CategoryElements();
		this.pHeading1 = new Heading1Elements();
		this.pHeading2 = new Heading2Elements();
		this.pHeading3 = new Heading3Elements();
		this.pHeading4 = new Heading4Elements();
		this.pHeading5 = new Heading5Elements();
		this.pAbstractFormattedInlineContent = new AbstractFormattedInlineContentElements();
		this.pBold = new BoldElements();
		this.pItalic = new ItalicElements();
		this.pItalicBold = new ItalicBoldElements();
		this.pAbstractUnformattedInlineContent = new AbstractUnformattedInlineContentElements();
		this.pText = new TextElements();
		this.pHyperLink = new HyperLinkElements();
		this.pInternal = new InternalElements();
		this.pInternalAlt = new InternalAltElements();
		this.pExternal = new ExternalElements();
		this.pExternalAlt = new ExternalAltElements();
		this.pAnyTextSequence = new AnyTextSequenceElements();
		this.pAnyText = new AnyTextElements();
		this.pName = new NameElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.univie.swa.ase2015.a9902268.task3.WikiML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////TODO: implement formatting as terminals with exceptions. similar as for JAVADOC example here: https://www.eclipse.org/forums/index.php/t/490044/
	//WikiPage: //according to wikitext documentation, one single title per page
	//	name=Heading1 //a page could potentially also exist without content
	//	elements+=ParagraphTypes*;
	public WikiPageElements getWikiPageAccess() {
		return pWikiPage;
	}
	
	public ParserRule getWikiPageRule() {
		return getWikiPageAccess().getRule();
	}

	////handle all types of paragraphs
	////FIXME: this list needs to be ordered, from general cases to specifics
	//ParagraphTypes:
	//	OrderListItemLevel1 | UnOrderListItemLevel1 | UnOrderListItemLevel2 | Image | Category | Template |
	//	AbstractFormattedInlineContent | AbstractUnformattedInlineContent | BlockQuote | Heading1 | Heading2 | Heading3 |
	//	Heading4 | Heading5;
	public ParagraphTypesElements getParagraphTypesAccess() {
		return pParagraphTypes;
	}
	
	public ParserRule getParagraphTypesRule() {
		return getParagraphTypesAccess().getRule();
	}

	//BlockQuote:
	//	{BlockQuote} "<blockquote>" content=AnyTextSequence "</blockquote>";
	public BlockQuoteElements getBlockQuoteAccess() {
		return pBlockQuote;
	}
	
	public ParserRule getBlockQuoteRule() {
		return getBlockQuoteAccess().getRule();
	}

	////TODO Check how Templates work
	//Template:
	//	"{{" content+=Text ("|" content+=Text)+ "}}";
	public TemplateElements getTemplateAccess() {
		return pTemplate;
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}

	//UnOrderListItemLevel2:
	//	"**" name=AnyText list=AnyTextSequence ":LIST";
	public UnOrderListItemLevel2Elements getUnOrderListItemLevel2Access() {
		return pUnOrderListItemLevel2;
	}
	
	public ParserRule getUnOrderListItemLevel2Rule() {
		return getUnOrderListItemLevel2Access().getRule();
	}

	//UnOrderListItemLevel1:
	//	"*" name=AnyText list=AnyTextSequence ":LIST";
	public UnOrderListItemLevel1Elements getUnOrderListItemLevel1Access() {
		return pUnOrderListItemLevel1;
	}
	
	public ParserRule getUnOrderListItemLevel1Rule() {
		return getUnOrderListItemLevel1Access().getRule();
	}

	//OrderListItemLevel1:
	//	"#" name=AnyText list=AnyTextSequence ":LIST";
	public OrderListItemLevel1Elements getOrderListItemLevel1Access() {
		return pOrderListItemLevel1;
	}
	
	public ParserRule getOrderListItemLevel1Rule() {
		return getOrderListItemLevel1Access().getRule();
	}

	////TODO: terminal rule for filename and supported formats
	/// * Supported file types 
	//    jpg/jpeg – recommended for photographic images.
	//    svg – a vector format recommended for drawings and line-art illustration.
	//    png – recommended for non-vector iconic images.
	//    gif
	// * / Image:
	//	"[[" "File:" name=Text ("|" type=ViewType)? ("|" hAlign=HorizontalAlign)? ("|alt="
	//	altText=AbstractUnformattedInlineContent)? "|" caption=AnyTextSequence "]]";
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	////see display modes here: https://en.wikipedia.org/wiki/Help:Visual_file_markup, no displaymode = basic
	//enum ViewType:
	//	thumb | thumbnail | frame | framed | frameless;
	public ViewTypeElements getViewTypeAccess() {
		return unknownRuleViewType;
	}
	
	public EnumRule getViewTypeRule() {
		return getViewTypeAccess().getRule();
	}

	////see alignment here: https://en.wikipedia.org/wiki/Help:Visual_file_markup, no displaymode = basic
	//enum HorizontalAlign:
	//	right | left | center | none;
	public HorizontalAlignElements getHorizontalAlignAccess() {
		return unknownRuleHorizontalAlign;
	}
	
	public EnumRule getHorizontalAlignRule() {
		return getHorizontalAlignAccess().getRule();
	}

	//Category:
	//	"[[" "Category:" name=Text value="|*?"? "]]";
	public CategoryElements getCategoryAccess() {
		return pCategory;
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	//Heading1:
	//	"=" headingValue1=Text "=";
	public Heading1Elements getHeading1Access() {
		return pHeading1;
	}
	
	public ParserRule getHeading1Rule() {
		return getHeading1Access().getRule();
	}

	//Heading2:
	//	"==" headingValue2=AbstractUnformattedInlineContent "==";
	public Heading2Elements getHeading2Access() {
		return pHeading2;
	}
	
	public ParserRule getHeading2Rule() {
		return getHeading2Access().getRule();
	}

	//Heading3:
	//	"===" headingValue3=AbstractUnformattedInlineContent "===";
	public Heading3Elements getHeading3Access() {
		return pHeading3;
	}
	
	public ParserRule getHeading3Rule() {
		return getHeading3Access().getRule();
	}

	//Heading4:
	//	"====" headingValue4=AbstractUnformattedInlineContent "====";
	public Heading4Elements getHeading4Access() {
		return pHeading4;
	}
	
	public ParserRule getHeading4Rule() {
		return getHeading4Access().getRule();
	}

	//Heading5:
	//	"=====" headingValue5=AbstractUnformattedInlineContent "=====";
	public Heading5Elements getHeading5Access() {
		return pHeading5;
	}
	
	public ParserRule getHeading5Rule() {
		return getHeading5Access().getRule();
	}

	//AbstractFormattedInlineContent:
	//	Bold | Italic | ItalicBold;
	public AbstractFormattedInlineContentElements getAbstractFormattedInlineContentAccess() {
		return pAbstractFormattedInlineContent;
	}
	
	public ParserRule getAbstractFormattedInlineContentRule() {
		return getAbstractFormattedInlineContentAccess().getRule();
	}

	//Bold:
	//	"\'\'\'" name=AbstractUnformattedInlineContent "\'\'\'";
	public BoldElements getBoldAccess() {
		return pBold;
	}
	
	public ParserRule getBoldRule() {
		return getBoldAccess().getRule();
	}

	//Italic:
	//	"\'\'" name=AbstractUnformattedInlineContent "\'\'";
	public ItalicElements getItalicAccess() {
		return pItalic;
	}
	
	public ParserRule getItalicRule() {
		return getItalicAccess().getRule();
	}

	//ItalicBold:
	//	"\'\'\'\'\'" name=AbstractUnformattedInlineContent "\'\'\'\'\'";
	public ItalicBoldElements getItalicBoldAccess() {
		return pItalicBold;
	}
	
	public ParserRule getItalicBoldRule() {
		return getItalicBoldAccess().getRule();
	}

	////UnformattedInlineContent
	//AbstractUnformattedInlineContent:
	//	Text | HyperLink;
	public AbstractUnformattedInlineContentElements getAbstractUnformattedInlineContentAccess() {
		return pAbstractUnformattedInlineContent;
	}
	
	public ParserRule getAbstractUnformattedInlineContentRule() {
		return getAbstractUnformattedInlineContentAccess().getRule();
	}

	//Text:
	//	name=Name;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//HyperLink:
	//	Internal | InternalAlt | External | ExternalAlt;
	public HyperLinkElements getHyperLinkAccess() {
		return pHyperLink;
	}
	
	public ParserRule getHyperLinkRule() {
		return getHyperLinkAccess().getRule();
	}

	//Internal:
	//	"[[" name=Text "]]";
	public InternalElements getInternalAccess() {
		return pInternal;
	}
	
	public ParserRule getInternalRule() {
		return getInternalAccess().getRule();
	}

	//InternalAlt:
	//	"[[" name=Text "|" altText=(AbstractUnformattedInlineContent | AbstractFormattedInlineContent) "]]";
	public InternalAltElements getInternalAltAccess() {
		return pInternalAlt;
	}
	
	public ParserRule getInternalAltRule() {
		return getInternalAltAccess().getRule();
	}

	//External:
	//	"[" name=URL "]";
	public ExternalElements getExternalAccess() {
		return pExternal;
	}
	
	public ParserRule getExternalRule() {
		return getExternalAccess().getRule();
	}

	//ExternalAlt:
	//	"[" name=URL altText=(AbstractUnformattedInlineContent | AbstractFormattedInlineContent) "]";
	public ExternalAltElements getExternalAltAccess() {
		return pExternalAlt;
	}
	
	public ParserRule getExternalAltRule() {
		return getExternalAltAccess().getRule();
	}

	/// *hidden()* / AnyTextSequence:
	//	{AnyTextSequence} content+=AnyText*;
	public AnyTextSequenceElements getAnyTextSequenceAccess() {
		return pAnyTextSequence;
	}
	
	public ParserRule getAnyTextSequenceRule() {
		return getAnyTextSequenceAccess().getRule();
	}

	//AnyText:
	//	name=(AbstractFormattedInlineContent | AbstractUnformattedInlineContent);
	public AnyTextElements getAnyTextAccess() {
		return pAnyText;
	}
	
	public ParserRule getAnyTextRule() {
		return getAnyTextAccess().getRule();
	}

	//Name:
	//	ID / *WS* / ID*;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	////override of terminals
	//terminal ID:
	//	("A".."Z" | "a".."z" | "_" | "-" | "(" | ")" | "," | "#" | "\"" | "." | ":" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal ML_COMMENT:
	//	"<!--"->"-->";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal STRING:
	//	("A".."Z" | "a".."z" | "_" | "-" | "(" | ")" | "," | "#" | "\"" | "." | ":" | "0".."9")*;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	////found online: https://xtexterience.wordpress.com/2011/06/08/urls-in-xtext/
	//terminal URL:
	//	"a".."z"+ // Protocol
	//	"://" ("0".."9"+ "." "0".."9"+ "." "0".."9"+ "." "0".."9"+ // Hostname
	//	| ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")* ("." ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9"
	//	| "$" | "-" | "_" | "\\" ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") | "%" "0".."9"
	//	"0".."9")*)*) (":" "0".."9"+)? // Portnumber
	//	("/" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "~" | "+" | "." | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")*)* // Path
	//	("?" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "=" | "&" | ";" | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")+ ("+" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" |
	//	"=" | "&" | ";" | "\\" ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") | "%" "0".."9"
	//	"0".."9")+)*)? // Query
	//;
	public TerminalRule getURLRule() {
		return tURL;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
