/*
 * generated by Xtext
 */
package at.ac.univie.swa.ase2015.a9902268.task3.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WikiMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WikipageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wikipage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameInlineContentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTitleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentInlineContentParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		private final Assignment cSectionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSectionsAbstractSectionParserRuleCall_4_0 = (RuleCall)cSectionsAssignment_4.eContents().get(0);
		private final Assignment cAbstractSectionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAbstractSectionsAbstractSectionParserRuleCall_5_0 = (RuleCall)cAbstractSectionsAssignment_5.eContents().get(0);
		
		//wikipage: //obligatory name of a page -> as defined by WikiML, should only occur once on a page
		////TODO: replace title with =
		//	"title" name=InlineContent "title\n" //optionally, there is text below the main heading
		//	content+=InlineContent? sections+=AbstractSection AbstractSections+=AbstractSection*;
		@Override public ParserRule getRule() { return rule; }

		////obligatory name of a page -> as defined by WikiML, should only occur once on a page
		////TODO: replace title with =
		//"title" name=InlineContent "title\n" //optionally, there is text below the main heading
		//content+=InlineContent? sections+=AbstractSection AbstractSections+=AbstractSection*
		public Group getGroup() { return cGroup; }

		////obligatory name of a page -> as defined by WikiML, should only occur once on a page
		////TODO: replace title with =
		//"title"
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }

		//name=InlineContent
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//InlineContent
		public RuleCall getNameInlineContentParserRuleCall_1_0() { return cNameInlineContentParserRuleCall_1_0; }

		//"title\n"
		public Keyword getTitleKeyword_2() { return cTitleKeyword_2; }

		////optionally, there is text below the main heading
		//content+=InlineContent?
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//InlineContent
		public RuleCall getContentInlineContentParserRuleCall_3_0() { return cContentInlineContentParserRuleCall_3_0; }

		//sections+=AbstractSection
		public Assignment getSectionsAssignment_4() { return cSectionsAssignment_4; }

		//AbstractSection
		public RuleCall getSectionsAbstractSectionParserRuleCall_4_0() { return cSectionsAbstractSectionParserRuleCall_4_0; }

		//AbstractSections+=AbstractSection*
		public Assignment getAbstractSectionsAssignment_5() { return cAbstractSectionsAssignment_5; }

		//AbstractSection
		public RuleCall getAbstractSectionsAbstractSectionParserRuleCall_5_0() { return cAbstractSectionsAbstractSectionParserRuleCall_5_0; }
	}

	public class AbstractSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubsectionLevel1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubsectionLevel2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubsectionLevel3ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubsectionLevel4ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractSection:
		//	SubsectionLevel1 | SubsectionLevel2 | SubsectionLevel3 | SubsectionLevel4;
		@Override public ParserRule getRule() { return rule; }

		//SubsectionLevel1 | SubsectionLevel2 | SubsectionLevel3 | SubsectionLevel4
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubsectionLevel1
		public RuleCall getSubsectionLevel1ParserRuleCall_0() { return cSubsectionLevel1ParserRuleCall_0; }

		//SubsectionLevel2
		public RuleCall getSubsectionLevel2ParserRuleCall_1() { return cSubsectionLevel2ParserRuleCall_1; }

		//SubsectionLevel3
		public RuleCall getSubsectionLevel3ParserRuleCall_2() { return cSubsectionLevel3ParserRuleCall_2; }

		//SubsectionLevel4
		public RuleCall getSubsectionLevel4ParserRuleCall_3() { return cSubsectionLevel4ParserRuleCall_3; }
	}

	public class SubsectionLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubsectionLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSection1Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameInlineContentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSection1Keyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentInlineContentParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//SubsectionLevel1: //TODO: replace section1 with ==
		//	"section1" name=InlineContent "section1\n" content=InlineContent?;
		@Override public ParserRule getRule() { return rule; }

		////TODO: replace section1 with ==
		//"section1" name=InlineContent "section1\n" content=InlineContent?
		public Group getGroup() { return cGroup; }

		////TODO: replace section1 with ==
		//"section1"
		public Keyword getSection1Keyword_0() { return cSection1Keyword_0; }

		//name=InlineContent
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//InlineContent
		public RuleCall getNameInlineContentParserRuleCall_1_0() { return cNameInlineContentParserRuleCall_1_0; }

		//"section1\n"
		public Keyword getSection1Keyword_2() { return cSection1Keyword_2; }

		//content=InlineContent?
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//InlineContent
		public RuleCall getContentInlineContentParserRuleCall_3_0() { return cContentInlineContentParserRuleCall_3_0; }
	}

	public class SubsectionLevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubsectionLevel2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSection2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameInlineContentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSection2Keyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentInlineContentParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//SubsectionLevel2: //TODO: replace section2 with ===
		//	"section2" name=InlineContent "section2\n" content=InlineContent?;
		@Override public ParserRule getRule() { return rule; }

		////TODO: replace section2 with ===
		//"section2" name=InlineContent "section2\n" content=InlineContent?
		public Group getGroup() { return cGroup; }

		////TODO: replace section2 with ===
		//"section2"
		public Keyword getSection2Keyword_0() { return cSection2Keyword_0; }

		//name=InlineContent
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//InlineContent
		public RuleCall getNameInlineContentParserRuleCall_1_0() { return cNameInlineContentParserRuleCall_1_0; }

		//"section2\n"
		public Keyword getSection2Keyword_2() { return cSection2Keyword_2; }

		//content=InlineContent?
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//InlineContent
		public RuleCall getContentInlineContentParserRuleCall_3_0() { return cContentInlineContentParserRuleCall_3_0; }
	}

	public class SubsectionLevel3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubsectionLevel3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSection3Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameInlineContentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSection3Keyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentInlineContentParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//SubsectionLevel3: //TODO: replace section3 with ====
		//	"section3" name=InlineContent "section3\n" content=InlineContent?;
		@Override public ParserRule getRule() { return rule; }

		////TODO: replace section3 with ====
		//"section3" name=InlineContent "section3\n" content=InlineContent?
		public Group getGroup() { return cGroup; }

		////TODO: replace section3 with ====
		//"section3"
		public Keyword getSection3Keyword_0() { return cSection3Keyword_0; }

		//name=InlineContent
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//InlineContent
		public RuleCall getNameInlineContentParserRuleCall_1_0() { return cNameInlineContentParserRuleCall_1_0; }

		//"section3\n"
		public Keyword getSection3Keyword_2() { return cSection3Keyword_2; }

		//content=InlineContent?
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//InlineContent
		public RuleCall getContentInlineContentParserRuleCall_3_0() { return cContentInlineContentParserRuleCall_3_0; }
	}

	public class SubsectionLevel4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubsectionLevel4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSection4Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameInlineContentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSection4Keyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentInlineContentParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//SubsectionLevel4: //TODO: replace section4 with =====
		//	"section4" name=InlineContent "section4\n" content=InlineContent?;
		@Override public ParserRule getRule() { return rule; }

		////TODO: replace section4 with =====
		//"section4" name=InlineContent "section4\n" content=InlineContent?
		public Group getGroup() { return cGroup; }

		////TODO: replace section4 with =====
		//"section4"
		public Keyword getSection4Keyword_0() { return cSection4Keyword_0; }

		//name=InlineContent
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//InlineContent
		public RuleCall getNameInlineContentParserRuleCall_1_0() { return cNameInlineContentParserRuleCall_1_0; }

		//"section4\n"
		public Keyword getSection4Keyword_2() { return cSection4Keyword_2; }

		//content=InlineContent?
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//InlineContent
		public RuleCall getContentInlineContentParserRuleCall_3_0() { return cContentInlineContentParserRuleCall_3_0; }
	}

	public class InlineContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//InlineContent:
		//	ID ID*;
		@Override public ParserRule getRule() { return rule; }

		//ID ID*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final WikipageElements pWikipage;
	private final AbstractSectionElements pAbstractSection;
	private final SubsectionLevel1Elements pSubsectionLevel1;
	private final SubsectionLevel2Elements pSubsectionLevel2;
	private final SubsectionLevel3Elements pSubsectionLevel3;
	private final SubsectionLevel4Elements pSubsectionLevel4;
	private final InlineContentElements pInlineContent;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WikiMLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWikipage = new WikipageElements();
		this.pAbstractSection = new AbstractSectionElements();
		this.pSubsectionLevel1 = new SubsectionLevel1Elements();
		this.pSubsectionLevel2 = new SubsectionLevel2Elements();
		this.pSubsectionLevel3 = new SubsectionLevel3Elements();
		this.pSubsectionLevel4 = new SubsectionLevel4Elements();
		this.pInlineContent = new InlineContentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.univie.swa.ase2015.a9902268.task3.WikiML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//wikipage: //obligatory name of a page -> as defined by WikiML, should only occur once on a page
	////TODO: replace title with =
	//	"title" name=InlineContent "title\n" //optionally, there is text below the main heading
	//	content+=InlineContent? sections+=AbstractSection AbstractSections+=AbstractSection*;
	public WikipageElements getWikipageAccess() {
		return pWikipage;
	}
	
	public ParserRule getWikipageRule() {
		return getWikipageAccess().getRule();
	}

	//AbstractSection:
	//	SubsectionLevel1 | SubsectionLevel2 | SubsectionLevel3 | SubsectionLevel4;
	public AbstractSectionElements getAbstractSectionAccess() {
		return pAbstractSection;
	}
	
	public ParserRule getAbstractSectionRule() {
		return getAbstractSectionAccess().getRule();
	}

	//SubsectionLevel1: //TODO: replace section1 with ==
	//	"section1" name=InlineContent "section1\n" content=InlineContent?;
	public SubsectionLevel1Elements getSubsectionLevel1Access() {
		return pSubsectionLevel1;
	}
	
	public ParserRule getSubsectionLevel1Rule() {
		return getSubsectionLevel1Access().getRule();
	}

	//SubsectionLevel2: //TODO: replace section2 with ===
	//	"section2" name=InlineContent "section2\n" content=InlineContent?;
	public SubsectionLevel2Elements getSubsectionLevel2Access() {
		return pSubsectionLevel2;
	}
	
	public ParserRule getSubsectionLevel2Rule() {
		return getSubsectionLevel2Access().getRule();
	}

	//SubsectionLevel3: //TODO: replace section3 with ====
	//	"section3" name=InlineContent "section3\n" content=InlineContent?;
	public SubsectionLevel3Elements getSubsectionLevel3Access() {
		return pSubsectionLevel3;
	}
	
	public ParserRule getSubsectionLevel3Rule() {
		return getSubsectionLevel3Access().getRule();
	}

	//SubsectionLevel4: //TODO: replace section4 with =====
	//	"section4" name=InlineContent "section4\n" content=InlineContent?;
	public SubsectionLevel4Elements getSubsectionLevel4Access() {
		return pSubsectionLevel4;
	}
	
	public ParserRule getSubsectionLevel4Rule() {
		return getSubsectionLevel4Access().getRule();
	}

	//InlineContent:
	//	ID ID*;
	public InlineContentElements getInlineContentAccess() {
		return pInlineContent;
	}
	
	public ParserRule getInlineContentRule() {
		return getInlineContentAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
