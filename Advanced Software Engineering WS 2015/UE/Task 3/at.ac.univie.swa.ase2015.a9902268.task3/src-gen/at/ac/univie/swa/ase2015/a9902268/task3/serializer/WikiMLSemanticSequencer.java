/*
 * generated by Xtext
 */
package at.ac.univie.swa.ase2015.a9902268.task3.serializer;

import at.ac.univie.swa.ase2015.a9902268.task3.services.WikiMLGrammarAccess;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.SubsectionLevel1;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.SubsectionLevel2;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.SubsectionLevel3;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.SubsectionLevel4;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.WikiMLPackage;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.wikipage;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public class WikiMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WikiMLGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == WikiMLPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case WikiMLPackage.SUBSECTION_LEVEL1:
				sequence_SubsectionLevel1(context, (SubsectionLevel1) semanticObject); 
				return; 
			case WikiMLPackage.SUBSECTION_LEVEL2:
				sequence_SubsectionLevel2(context, (SubsectionLevel2) semanticObject); 
				return; 
			case WikiMLPackage.SUBSECTION_LEVEL3:
				sequence_SubsectionLevel3(context, (SubsectionLevel3) semanticObject); 
				return; 
			case WikiMLPackage.SUBSECTION_LEVEL4:
				sequence_SubsectionLevel4(context, (SubsectionLevel4) semanticObject); 
				return; 
			case WikiMLPackage.WIKIPAGE:
				sequence_wikipage(context, (wikipage) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=InlineContent content=InlineContent?)
	 */
	protected void sequence_SubsectionLevel1(EObject context, SubsectionLevel1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=InlineContent content=InlineContent?)
	 */
	protected void sequence_SubsectionLevel2(EObject context, SubsectionLevel2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=InlineContent content=InlineContent?)
	 */
	protected void sequence_SubsectionLevel3(EObject context, SubsectionLevel3 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=InlineContent content=InlineContent?)
	 */
	protected void sequence_SubsectionLevel4(EObject context, SubsectionLevel4 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=InlineContent content+=InlineContent? sections+=AbstractSection AbstractSections+=AbstractSection*)
	 */
	protected void sequence_wikipage(EObject context, wikipage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
