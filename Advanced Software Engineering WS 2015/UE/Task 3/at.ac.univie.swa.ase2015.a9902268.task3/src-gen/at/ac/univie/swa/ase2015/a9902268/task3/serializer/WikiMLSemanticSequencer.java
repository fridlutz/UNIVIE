/*
 * generated by Xtext
 */
package at.ac.univie.swa.ase2015.a9902268.task3.serializer;

import at.ac.univie.swa.ase2015.a9902268.task3.services.WikiMLGrammarAccess;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.NormalParagraph;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.PageTitle;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.SubSection;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.SubSubSection;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.SubSubSubSection;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.WikiMLPackage;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.WikiMLPage;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class WikiMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WikiMLGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == WikiMLPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case WikiMLPackage.NORMAL_PARAGRAPH:
				sequence_NormalParagraph(context, (NormalParagraph) semanticObject); 
				return; 
			case WikiMLPackage.PAGE_TITLE:
				sequence_PageTitle(context, (PageTitle) semanticObject); 
				return; 
			case WikiMLPackage.SUB_SECTION:
				sequence_SubSection(context, (SubSection) semanticObject); 
				return; 
			case WikiMLPackage.SUB_SUB_SECTION:
				sequence_SubSubSection(context, (SubSubSection) semanticObject); 
				return; 
			case WikiMLPackage.SUB_SUB_SUB_SECTION:
				sequence_SubSubSubSection(context, (SubSubSubSection) semanticObject); 
				return; 
			case WikiMLPackage.WIKI_ML_PAGE:
				sequence_WikiMLPage(context, (WikiMLPage) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     name=TEXT
	 */
	protected void sequence_NormalParagraph(EObject context, NormalParagraph semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, WikiMLPackage.Literals.NORMAL_PARAGRAPH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WikiMLPackage.Literals.NORMAL_PARAGRAPH__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNormalParagraphAccess().getNameTEXTTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=TEXT content+=AbstractParagraph*)
	 */
	protected void sequence_PageTitle(EObject context, PageTitle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=TEXT content+=AbstractParagraph*)
	 */
	protected void sequence_SubSection(EObject context, SubSection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=TEXT content+=AbstractParagraph*)
	 */
	protected void sequence_SubSubSection(EObject context, SubSubSection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=TEXT content+=AbstractParagraph*)
	 */
	protected void sequence_SubSubSubSection(EObject context, SubSubSubSection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (title+=PageTitle section+=AbstractSection*)
	 */
	protected void sequence_WikiMLPage(EObject context, WikiMLPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
