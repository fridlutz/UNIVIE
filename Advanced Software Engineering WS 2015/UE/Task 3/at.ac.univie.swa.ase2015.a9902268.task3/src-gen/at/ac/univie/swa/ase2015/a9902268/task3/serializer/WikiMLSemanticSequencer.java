/*
 * generated by Xtext
 */
package at.ac.univie.swa.ase2015.a9902268.task3.serializer;

import at.ac.univie.swa.ase2015.a9902268.task3.services.WikiMLGrammarAccess;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.BlockQuote;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.Category;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.External;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.ExternalAlt;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.File;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.Internal;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.InternalAlt;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.OrderListItemLevel1;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.Template;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.Text;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.UnOrderListItemLevel1;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.UnOrderListItemLevel2;
import at.ac.univie.swa.ase2015.a9902268.task3.wikiML.WikiMLPackage;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class WikiMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WikiMLGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == WikiMLPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case WikiMLPackage.BLOCK_QUOTE:
				sequence_BlockQuote(context, (BlockQuote) semanticObject); 
				return; 
			case WikiMLPackage.CATEGORY:
				sequence_Category(context, (Category) semanticObject); 
				return; 
			case WikiMLPackage.EXTERNAL:
				sequence_External(context, (External) semanticObject); 
				return; 
			case WikiMLPackage.EXTERNAL_ALT:
				sequence_ExternalAlt(context, (ExternalAlt) semanticObject); 
				return; 
			case WikiMLPackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case WikiMLPackage.INTERNAL:
				sequence_Internal(context, (Internal) semanticObject); 
				return; 
			case WikiMLPackage.INTERNAL_ALT:
				sequence_InternalAlt(context, (InternalAlt) semanticObject); 
				return; 
			case WikiMLPackage.ORDER_LIST_ITEM_LEVEL1:
				sequence_OrderListItemLevel1(context, (OrderListItemLevel1) semanticObject); 
				return; 
			case WikiMLPackage.TEMPLATE:
				sequence_Template(context, (Template) semanticObject); 
				return; 
			case WikiMLPackage.TEXT:
				if(context == grammarAccess.getAbstractFormattedInlineContentRule() ||
				   context == grammarAccess.getAbstractUnformattedInlineContentRule() ||
				   context == grammarAccess.getBoldRule() ||
				   context == grammarAccess.getHeading1Rule() ||
				   context == grammarAccess.getHeading2Rule() ||
				   context == grammarAccess.getHeading3Rule() ||
				   context == grammarAccess.getHeading4Rule() ||
				   context == grammarAccess.getHeading5Rule() ||
				   context == grammarAccess.getItalicRule() ||
				   context == grammarAccess.getItalicBoldRule() ||
				   context == grammarAccess.getParagraphTypesRule() ||
				   context == grammarAccess.getTextRule()) {
					sequence_Text(context, (Text) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getWikiRule()) {
					sequence_Text_wiki(context, (Text) semanticObject); 
					return; 
				}
				else break;
			case WikiMLPackage.UN_ORDER_LIST_ITEM_LEVEL1:
				sequence_UnOrderListItemLevel1(context, (UnOrderListItemLevel1) semanticObject); 
				return; 
			case WikiMLPackage.UN_ORDER_LIST_ITEM_LEVEL2:
				sequence_UnOrderListItemLevel2(context, (UnOrderListItemLevel2) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     ((content+=AbstractUnformattedInlineContent | content+=AbstractFormattedInlineContent)*)
	 */
	protected void sequence_BlockQuote(EObject context, BlockQuote semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=AbstractUnformattedInlineContent
	 */
	protected void sequence_Category(EObject context, Category semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, WikiMLPackage.Literals.CATEGORY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WikiMLPackage.Literals.CATEGORY__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCategoryAccess().getNameAbstractUnformattedInlineContentParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=URL (altText=AbstractUnformattedInlineContent | altText=AbstractFormattedInlineContent))
	 */
	protected void sequence_ExternalAlt(EObject context, ExternalAlt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=URL
	 */
	protected void sequence_External(EObject context, External semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, WikiMLPackage.Literals.EXTERNAL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WikiMLPackage.Literals.EXTERNAL__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getExternalAccess().getNameURLTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=AbstractUnformattedInlineContent (caption+=AbstractFormattedInlineContent | caption+=AbstractUnformattedInlineContent)*)
	 */
	protected void sequence_File(EObject context, File semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=Text (altText=AbstractUnformattedInlineContent | altText=AbstractFormattedInlineContent))
	 */
	protected void sequence_InternalAlt(EObject context, InternalAlt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=Text
	 */
	protected void sequence_Internal(EObject context, Internal semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, WikiMLPackage.Literals.INTERNAL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WikiMLPackage.Literals.INTERNAL__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getInternalAccess().getNameTextParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (name=AbstractFormattedInlineContent | name=AbstractUnformattedInlineContent) 
	 *         (list+=AbstractFormattedInlineContent | list+=AbstractUnformattedInlineContent)*
	 *     )
	 */
	protected void sequence_OrderListItemLevel1(EObject context, OrderListItemLevel1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=Text content+=Text content+=Text*)
	 */
	protected void sequence_Template(EObject context, Template semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=Name
	 */
	protected void sequence_Text(EObject context, Text semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=Name elements+=ParagraphTypes*)
	 */
	protected void sequence_Text_wiki(EObject context, Text semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (name=AbstractFormattedInlineContent | name=AbstractUnformattedInlineContent) 
	 *         (list+=AbstractFormattedInlineContent | list+=AbstractUnformattedInlineContent)*
	 *     )
	 */
	protected void sequence_UnOrderListItemLevel1(EObject context, UnOrderListItemLevel1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (name=AbstractFormattedInlineContent | name=AbstractUnformattedInlineContent) 
	 *         (list+=AbstractFormattedInlineContent | list+=AbstractUnformattedInlineContent)*
	 *     )
	 */
	protected void sequence_UnOrderListItemLevel2(EObject context, UnOrderListItemLevel2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
