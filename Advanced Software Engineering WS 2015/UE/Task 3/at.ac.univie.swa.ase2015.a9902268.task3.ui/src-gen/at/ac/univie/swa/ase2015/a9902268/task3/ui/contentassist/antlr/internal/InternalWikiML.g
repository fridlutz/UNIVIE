/*
 * generated by Xtext
 */
grammar InternalWikiML;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package at.ac.univie.swa.ase2015.a9902268.task3.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.ac.univie.swa.ase2015.a9902268.task3.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.ac.univie.swa.ase2015.a9902268.task3.services.WikiMLGrammarAccess;

}

@parser::members {
 
 	private WikiMLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(WikiMLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleWikiMLPage
entryRuleWikiMLPage 
:
{ before(grammarAccess.getWikiMLPageRule()); }
	 ruleWikiMLPage
{ after(grammarAccess.getWikiMLPageRule()); } 
	 EOF 
;

// Rule WikiMLPage
ruleWikiMLPage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWikiMLPageAccess().getGroup()); }
(rule__WikiMLPage__Group__0)
{ after(grammarAccess.getWikiMLPageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePageTitle
entryRulePageTitle 
:
{ before(grammarAccess.getPageTitleRule()); }
	 rulePageTitle
{ after(grammarAccess.getPageTitleRule()); } 
	 EOF 
;

// Rule PageTitle
rulePageTitle
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPageTitleAccess().getGroup()); }
(rule__PageTitle__Group__0)
{ after(grammarAccess.getPageTitleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractSection
entryRuleAbstractSection 
:
{ before(grammarAccess.getAbstractSectionRule()); }
	 ruleAbstractSection
{ after(grammarAccess.getAbstractSectionRule()); } 
	 EOF 
;

// Rule AbstractSection
ruleAbstractSection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractSectionAccess().getAlternatives()); }
(rule__AbstractSection__Alternatives)
{ after(grammarAccess.getAbstractSectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubSection
entryRuleSubSection 
:
{ before(grammarAccess.getSubSectionRule()); }
	 ruleSubSection
{ after(grammarAccess.getSubSectionRule()); } 
	 EOF 
;

// Rule SubSection
ruleSubSection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubSectionAccess().getGroup()); }
(rule__SubSection__Group__0)
{ after(grammarAccess.getSubSectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubSubSection
entryRuleSubSubSection 
:
{ before(grammarAccess.getSubSubSectionRule()); }
	 ruleSubSubSection
{ after(grammarAccess.getSubSubSectionRule()); } 
	 EOF 
;

// Rule SubSubSection
ruleSubSubSection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubSubSectionAccess().getGroup()); }
(rule__SubSubSection__Group__0)
{ after(grammarAccess.getSubSubSectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubSubSubSection
entryRuleSubSubSubSection 
:
{ before(grammarAccess.getSubSubSubSectionRule()); }
	 ruleSubSubSubSection
{ after(grammarAccess.getSubSubSubSectionRule()); } 
	 EOF 
;

// Rule SubSubSubSection
ruleSubSubSubSection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubSubSubSectionAccess().getGroup()); }
(rule__SubSubSubSection__Group__0)
{ after(grammarAccess.getSubSubSubSectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractParagraph
entryRuleAbstractParagraph 
:
{ before(grammarAccess.getAbstractParagraphRule()); }
	 ruleAbstractParagraph
{ after(grammarAccess.getAbstractParagraphRule()); } 
	 EOF 
;

// Rule AbstractParagraph
ruleAbstractParagraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractParagraphAccess().getAlternatives()); }
(rule__AbstractParagraph__Alternatives)
{ after(grammarAccess.getAbstractParagraphAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNormalParagraph
entryRuleNormalParagraph 
:
{ before(grammarAccess.getNormalParagraphRule()); }
	 ruleNormalParagraph
{ after(grammarAccess.getNormalParagraphRule()); } 
	 EOF 
;

// Rule NormalParagraph
ruleNormalParagraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNormalParagraphAccess().getNameAssignment()); }
(rule__NormalParagraph__NameAssignment)
{ after(grammarAccess.getNormalParagraphAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoldParagraph
entryRuleBoldParagraph 
:
{ before(grammarAccess.getBoldParagraphRule()); }
	 ruleBoldParagraph
{ after(grammarAccess.getBoldParagraphRule()); } 
	 EOF 
;

// Rule BoldParagraph
ruleBoldParagraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoldParagraphAccess().getGroup()); }
(rule__BoldParagraph__Group__0)
{ after(grammarAccess.getBoldParagraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleItalicParagraph
entryRuleItalicParagraph 
:
{ before(grammarAccess.getItalicParagraphRule()); }
	 ruleItalicParagraph
{ after(grammarAccess.getItalicParagraphRule()); } 
	 EOF 
;

// Rule ItalicParagraph
ruleItalicParagraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getItalicParagraphAccess().getGroup()); }
(rule__ItalicParagraph__Group__0)
{ after(grammarAccess.getItalicParagraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AbstractSection__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractSectionAccess().getSubSectionParserRuleCall_0()); }
	ruleSubSection
{ after(grammarAccess.getAbstractSectionAccess().getSubSectionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractSectionAccess().getSubSubSectionParserRuleCall_1()); }
	ruleSubSubSection
{ after(grammarAccess.getAbstractSectionAccess().getSubSubSectionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractSectionAccess().getSubSubSubSectionParserRuleCall_2()); }
	ruleSubSubSubSection
{ after(grammarAccess.getAbstractSectionAccess().getSubSubSubSectionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractParagraph__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractParagraphAccess().getNormalParagraphParserRuleCall_0()); }
	ruleNormalParagraph
{ after(grammarAccess.getAbstractParagraphAccess().getNormalParagraphParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractParagraphAccess().getBoldParagraphParserRuleCall_1()); }
	ruleBoldParagraph
{ after(grammarAccess.getAbstractParagraphAccess().getBoldParagraphParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractParagraphAccess().getItalicParagraphParserRuleCall_2()); }
	ruleItalicParagraph
{ after(grammarAccess.getAbstractParagraphAccess().getItalicParagraphParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__WikiMLPage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WikiMLPage__Group__0__Impl
	rule__WikiMLPage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WikiMLPage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWikiMLPageAccess().getTitleAssignment_0()); }
(rule__WikiMLPage__TitleAssignment_0)
{ after(grammarAccess.getWikiMLPageAccess().getTitleAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WikiMLPage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WikiMLPage__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WikiMLPage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWikiMLPageAccess().getSectionAssignment_1()); }
(rule__WikiMLPage__SectionAssignment_1)*
{ after(grammarAccess.getWikiMLPageAccess().getSectionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PageTitle__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PageTitle__Group__0__Impl
	rule__PageTitle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PageTitle__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPageTitleAccess().getEqualsSignKeyword_0()); }

	'=' 

{ after(grammarAccess.getPageTitleAccess().getEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PageTitle__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PageTitle__Group__1__Impl
	rule__PageTitle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PageTitle__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPageTitleAccess().getNameAssignment_1()); }
(rule__PageTitle__NameAssignment_1)
{ after(grammarAccess.getPageTitleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PageTitle__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PageTitle__Group__2__Impl
	rule__PageTitle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PageTitle__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPageTitleAccess().getEqualsSignControl000aKeyword_2()); }

	'=\n' 

{ after(grammarAccess.getPageTitleAccess().getEqualsSignControl000aKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PageTitle__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PageTitle__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PageTitle__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPageTitleAccess().getContentAssignment_3()); }
(rule__PageTitle__ContentAssignment_3)*
{ after(grammarAccess.getPageTitleAccess().getContentAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SubSection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSection__Group__0__Impl
	rule__SubSection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSectionAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getSubSectionAccess().getEqualsSignEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSection__Group__1__Impl
	rule__SubSection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSectionAccess().getNameAssignment_1()); }
(rule__SubSection__NameAssignment_1)
{ after(grammarAccess.getSubSectionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSection__Group__2__Impl
	rule__SubSection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSectionAccess().getEqualsSignEqualsSignControl000aKeyword_2()); }

	'==\n' 

{ after(grammarAccess.getSubSectionAccess().getEqualsSignEqualsSignControl000aKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSection__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSection__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSection__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSectionAccess().getContentAssignment_3()); }
(rule__SubSection__ContentAssignment_3)*
{ after(grammarAccess.getSubSectionAccess().getContentAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SubSubSection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSubSection__Group__0__Impl
	rule__SubSubSection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSectionAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }

	'===' 

{ after(grammarAccess.getSubSubSectionAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSubSection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSubSection__Group__1__Impl
	rule__SubSubSection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSectionAccess().getNameAssignment_1()); }
(rule__SubSubSection__NameAssignment_1)
{ after(grammarAccess.getSubSubSectionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSubSection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSubSection__Group__2__Impl
	rule__SubSubSection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSectionAccess().getEqualsSignEqualsSignEqualsSignControl000aKeyword_2()); }

	'===\n' 

{ after(grammarAccess.getSubSubSectionAccess().getEqualsSignEqualsSignEqualsSignControl000aKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSubSection__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSubSection__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSection__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSectionAccess().getContentAssignment_3()); }
(rule__SubSubSection__ContentAssignment_3)*
{ after(grammarAccess.getSubSubSectionAccess().getContentAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SubSubSubSection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSubSubSection__Group__0__Impl
	rule__SubSubSubSection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSubSection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSubSectionAccess().getEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0()); }

	'====' 

{ after(grammarAccess.getSubSubSubSectionAccess().getEqualsSignEqualsSignEqualsSignEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSubSubSection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSubSubSection__Group__1__Impl
	rule__SubSubSubSection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSubSection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSubSectionAccess().getNameAssignment_1()); }
(rule__SubSubSubSection__NameAssignment_1)
{ after(grammarAccess.getSubSubSubSectionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSubSubSection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSubSubSection__Group__2__Impl
	rule__SubSubSubSection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSubSection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSubSectionAccess().getEqualsSignEqualsSignEqualsSignEqualsSignControl000aKeyword_2()); }

	'====\n' 

{ after(grammarAccess.getSubSubSubSectionAccess().getEqualsSignEqualsSignEqualsSignEqualsSignControl000aKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSubSubSection__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSubSubSection__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSubSection__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSubSectionAccess().getContentAssignment_3()); }
(rule__SubSubSubSection__ContentAssignment_3)*
{ after(grammarAccess.getSubSubSubSectionAccess().getContentAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BoldParagraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoldParagraph__Group__0__Impl
	rule__BoldParagraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoldParagraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoldParagraphAccess().getApostropheApostropheApostropheKeyword_0()); }

	'\'\'\'' 

{ after(grammarAccess.getBoldParagraphAccess().getApostropheApostropheApostropheKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoldParagraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoldParagraph__Group__1__Impl
	rule__BoldParagraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoldParagraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoldParagraphAccess().getNormalParagraphParserRuleCall_1()); }
	ruleNormalParagraph
{ after(grammarAccess.getBoldParagraphAccess().getNormalParagraphParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoldParagraph__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoldParagraph__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoldParagraph__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoldParagraphAccess().getApostropheApostropheApostropheKeyword_2()); }

	'\'\'\'' 

{ after(grammarAccess.getBoldParagraphAccess().getApostropheApostropheApostropheKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ItalicParagraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ItalicParagraph__Group__0__Impl
	rule__ItalicParagraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ItalicParagraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItalicParagraphAccess().getApostropheApostropheKeyword_0()); }

	'\'\'' 

{ after(grammarAccess.getItalicParagraphAccess().getApostropheApostropheKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ItalicParagraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ItalicParagraph__Group__1__Impl
	rule__ItalicParagraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ItalicParagraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItalicParagraphAccess().getNormalParagraphParserRuleCall_1()); }
	ruleNormalParagraph
{ after(grammarAccess.getItalicParagraphAccess().getNormalParagraphParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ItalicParagraph__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ItalicParagraph__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ItalicParagraph__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItalicParagraphAccess().getApostropheApostropheKeyword_2()); }

	'\'\'' 

{ after(grammarAccess.getItalicParagraphAccess().getApostropheApostropheKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__WikiMLPage__TitleAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWikiMLPageAccess().getTitlePageTitleParserRuleCall_0_0()); }
	rulePageTitle{ after(grammarAccess.getWikiMLPageAccess().getTitlePageTitleParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WikiMLPage__SectionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWikiMLPageAccess().getSectionAbstractSectionParserRuleCall_1_0()); }
	ruleAbstractSection{ after(grammarAccess.getWikiMLPageAccess().getSectionAbstractSectionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PageTitle__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPageTitleAccess().getNameTEXTTerminalRuleCall_1_0()); }
	RULE_TEXT{ after(grammarAccess.getPageTitleAccess().getNameTEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PageTitle__ContentAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPageTitleAccess().getContentAbstractParagraphParserRuleCall_3_0()); }
	ruleAbstractParagraph{ after(grammarAccess.getPageTitleAccess().getContentAbstractParagraphParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSection__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSectionAccess().getNameTEXTTerminalRuleCall_1_0()); }
	RULE_TEXT{ after(grammarAccess.getSubSectionAccess().getNameTEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSection__ContentAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSectionAccess().getContentAbstractParagraphParserRuleCall_3_0()); }
	ruleAbstractParagraph{ after(grammarAccess.getSubSectionAccess().getContentAbstractParagraphParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSection__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSectionAccess().getNameTEXTTerminalRuleCall_1_0()); }
	RULE_TEXT{ after(grammarAccess.getSubSubSectionAccess().getNameTEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSection__ContentAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSectionAccess().getContentAbstractParagraphParserRuleCall_3_0()); }
	ruleAbstractParagraph{ after(grammarAccess.getSubSubSectionAccess().getContentAbstractParagraphParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSubSection__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSubSectionAccess().getNameTEXTTerminalRuleCall_1_0()); }
	RULE_TEXT{ after(grammarAccess.getSubSubSubSectionAccess().getNameTEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSubSubSection__ContentAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSubSubSectionAccess().getContentAbstractParagraphParserRuleCall_3_0()); }
	ruleAbstractParagraph{ after(grammarAccess.getSubSubSubSectionAccess().getContentAbstractParagraphParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalParagraph__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalParagraphAccess().getNameTEXTTerminalRuleCall_0()); }
	RULE_TEXT{ after(grammarAccess.getNormalParagraphAccess().getNameTEXTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_TEXT : '^'? ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|' ')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


