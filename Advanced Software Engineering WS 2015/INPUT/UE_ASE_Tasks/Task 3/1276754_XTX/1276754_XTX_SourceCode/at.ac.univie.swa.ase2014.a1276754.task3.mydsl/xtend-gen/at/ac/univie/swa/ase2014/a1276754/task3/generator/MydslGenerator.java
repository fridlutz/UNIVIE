/**
 * generated by Xtext
 */
package at.ac.univie.swa.ase2014.a1276754.task3.generator;

import at.ac.univie.swa.ase2014.a1276754.task3.mydsl.Distributor;
import at.ac.univie.swa.ase2014.a1276754.task3.mydsl.Genre;
import at.ac.univie.swa.ase2014.a1276754.task3.mydsl.Playlist;
import at.ac.univie.swa.ase2014.a1276754.task3.mydsl.Song;
import at.ac.univie.swa.ase2014.a1276754.task3.mydsl.Time;
import com.google.common.collect.Iterables;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class MydslGenerator implements IGenerator {
  private HashMap<String, Song> playlist;
  
  private Map<Distributor, Double> distributors;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    HashMap<Distributor, Double> _hashMap = new HashMap<Distributor, Double>();
    this.distributors = _hashMap;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Playlist> _filter = Iterables.<Playlist>filter(_iterable, Playlist.class);
    for (final Playlist p : _filter) {
      {
        HashMap<String, Song> _hashMap_1 = new HashMap<String, Song>();
        this.playlist = _hashMap_1;
        String _name = p.getName();
        String _plus = ("pl_" + _name);
        String _plus_1 = (_plus + ".html");
        CharSequence _compile = this.compile(p);
        fsa.generateFile(_plus_1, _compile);
        String _plus_2 = (p + " ");
        int _size = this.playlist.size();
        String _plus_3 = (_plus_2 + Integer.valueOf(_size));
        System.out.println(_plus_3);
      }
    }
    CharSequence _writeDist = this.writeDist();
    fsa.generateFile(
      "distributors.html", _writeDist);
    String _plus = (this.distributors + " ");
    int _size = this.distributors.size();
    String _plus_1 = (_plus + Integer.valueOf(_size));
    System.out.println(_plus_1);
  }
  
  public CharSequence writeDist() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<table style=\"border:thin solid black\">");
    _builder.newLine();
    _builder.append("<tr><td colspan=\"6\" align=\"center\">Distributors</td></tr>");
    _builder.newLine();
    _builder.append("<tr><td>Name</td><td>Earnings</td></tr>");
    _builder.newLine();
    {
      Set<Map.Entry<Distributor, Double>> _entrySet = this.distributors.entrySet();
      for(final Map.Entry<Distributor, Double> entry : _entrySet) {
        Distributor key = entry.getKey();
        _builder.newLineIfNotEmpty();
        Double value = entry.getValue();
        _builder.newLineIfNotEmpty();
        _builder.append("<tr><td>");
        String _name = key.getName();
        _builder.append(_name, "");
        _builder.append("</td><td>");
        _builder.append(value, "");
        _builder.append("</td></tr>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("</table>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Distributor di) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<table style=\"border:thin solid black\">");
    _builder.newLine();
    _builder.append("<tr><td colspan=\"6\" align=\"center\">Distributors</td></tr>");
    _builder.newLine();
    _builder.append("<tr><td>Name</td><td>Earnings</td></tr>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Playlist pl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Song> _songs = pl.getSongs();
      for(final Song s : _songs) {
        this.compile(s);
        _builder.newLineIfNotEmpty();
        String _name = s.getName();
        String _plus = ("songs: " + _name);
        System.out.println(_plus);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Playlist> _incl = pl.getIncl();
      for(final Playlist p : _incl) {
        this.include(p);
        _builder.newLineIfNotEmpty();
        String _name_1 = p.getName();
        String _plus_1 = ("include playlist: " + _name_1);
        System.out.println(_plus_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    System.out.println();
    _builder.newLineIfNotEmpty();
    _builder.append("<table style=\"border:thin solid black\">");
    _builder.newLine();
    _builder.append("<tr><td colspan=\"6\" align=\"center\">");
    String _name_2 = pl.getName();
    _builder.append(_name_2, "");
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td>Titel</td><td>Kuenstler</td><td>Produzent</td><td>Laenge</td><td>Genre</td><td>Preis</td></tr>");
    _builder.newLine();
    CharSequence _writeTable = this.writeTable();
    _builder.append(_writeTable, "");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("</table>");
    _builder.newLine();
    return _builder;
  }
  
  public void include(final Playlist p) {
    EList<Song> _songs = p.getSongs();
    for (final Song s : _songs) {
      {
        this.compile(s);
        String _name = s.getName();
        String _plus = ("p:incl songs: " + _name);
        System.out.println(_plus);
      }
    }
    EList<Song> _excl = p.getExcl();
    System.out.println(_excl);
    EList<Song> _excl_1 = p.getExcl();
    for (final Song s_1 : _excl_1) {
      {
        this.exclude(s_1);
        String _name = s_1.getName();
        String _plus = ("p:exclude songs: " + _name);
        System.out.println(_plus);
      }
    }
  }
  
  public void compile(final Song song) {
    String _name = song.getName();
    this.playlist.put(_name, song);
    String _name_1 = song.getName();
    String _plus = ("song:: " + _name_1);
    System.out.println(_plus);
  }
  
  public void exclude(final Song song) {
    String _name = song.getName();
    String _plus = ("excl:: " + _name);
    System.out.println(_plus);
    String _name_1 = song.getName();
    boolean _containsKey = this.playlist.containsKey(_name_1);
    if (_containsKey) {
      this.playlist.remove(song);
      String _name_2 = song.getName();
      String _plus_1 = ("excl done:: " + _name_2);
      System.out.println(_plus_1);
    }
  }
  
  public CharSequence writeTable() {
    StringConcatenation _builder = new StringConcatenation();
    {
      Collection<Song> _values = this.playlist.values();
      for(final Song s : _values) {
        _builder.append("<tr><td>");
        String _name = s.getName();
        _builder.append(_name, "");
        _builder.append("</td><td>");
        String _artist = s.getArtist();
        _builder.append(_artist, "");
        _builder.append("</td><td>");
        Distributor _dist = s.getDist();
        String _name_1 = _dist.getName();
        _builder.append(_name_1, "");
        _builder.append("</td><td>");
        Time _length = s.getLength();
        int _min = _length.getMin();
        String _plus = (Integer.valueOf(_min) + ":");
        Time _length_1 = s.getLength();
        int _sec = _length_1.getSec();
        String _plus_1 = (_plus + Integer.valueOf(_sec));
        _builder.append(_plus_1, "");
        _builder.append("</td><td>");
        Genre _genre = s.getGenre();
        _builder.append(_genre, "");
        _builder.append("</td><td>");
        String _price = s.getPrice();
        _builder.append(_price, "");
        _builder.append("</td></tr>");
        _builder.newLineIfNotEmpty();
        Distributor _dist_1 = s.getDist();
        String _price_1 = s.getPrice();
        Double _countDist = this.countDist(_dist_1, _price_1);
        _builder.append(_countDist, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public Double countDist(final Distributor distributor, final String price) {
    Double _xblockexpression = null;
    {
      double dPrice = Double.parseDouble(price);
      Double _xifexpression = null;
      boolean _containsKey = this.distributors.containsKey(distributor);
      if (_containsKey) {
        Double _xblockexpression_1 = null;
        {
          Double _get = this.distributors.get(distributor);
          double _plus = (dPrice + (_get).doubleValue());
          dPrice = _plus;
          _xblockexpression_1 = this.distributors.replace(distributor, Double.valueOf(dPrice));
        }
        _xifexpression = _xblockexpression_1;
      } else {
        _xifexpression = this.distributors.put(distributor, Double.valueOf(dPrice));
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
}
