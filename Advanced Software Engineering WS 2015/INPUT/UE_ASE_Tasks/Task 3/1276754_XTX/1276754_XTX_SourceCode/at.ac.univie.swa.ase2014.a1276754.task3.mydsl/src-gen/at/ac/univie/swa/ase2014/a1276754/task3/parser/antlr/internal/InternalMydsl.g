/*
* generated by Xtext
*/
grammar InternalMydsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.ac.univie.swa.ase2014.a1276754.task3.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.ac.univie.swa.ase2014.a1276754.task3.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.ac.univie.swa.ase2014.a1276754.task3.services.MydslGrammarAccess;

}

@parser::members {

 	private MydslGrammarAccess grammarAccess;
 	
    public InternalMydslParser(TokenStream input, MydslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MydslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Distributors:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getDistributorsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDistributorsDistributorParserRuleCall_1_0()); 
	    }
		lv_distributors_1_0=ruleDistributor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"distributors",
        		lv_distributors_1_0, 
        		"Distributor");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='Library:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getLibraryKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSongsSongParserRuleCall_3_0()); 
	    }
		lv_songs_3_0=ruleSong		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"songs",
        		lv_songs_3_0, 
        		"Song");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='Playlists:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getPlaylistsKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPlaylistsPlaylistParserRuleCall_5_0()); 
	    }
		lv_playlists_5_0=rulePlaylist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"playlists",
        		lv_playlists_5_0, 
        		"Playlist");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDistributor
entryRuleDistributor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDistributorRule()); }
	 iv_ruleDistributor=ruleDistributor 
	 { $current=$iv_ruleDistributor.current; } 
	 EOF 
;

// Rule Distributor
ruleDistributor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDistributorAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDistributorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='Address:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDistributorAccess().getAddressKeyword_1());
    }
(
(
		lv_adresse_2_0=RULE_STRING
		{
			newLeafNode(lv_adresse_2_0, grammarAccess.getDistributorAccess().getAdresseSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDistributorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"adresse",
        		lv_adresse_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='Account Information:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDistributorAccess().getAccountInformationKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDistributorAccess().getAcc_infoAccount_InformationParserRuleCall_4_0()); 
	    }
		lv_acc_info_4_0=ruleAccount_Information		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistributorRule());
	        }
       		set(
       			$current, 
       			"acc_info",
        		lv_acc_info_4_0, 
        		"Account_Information");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAccount_Information
entryRuleAccount_Information returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccount_InformationRule()); }
	 iv_ruleAccount_Information=ruleAccount_Information 
	 { $current=$iv_ruleAccount_Information.current; } 
	 EOF 
;

// Rule Account_Information
ruleAccount_Information returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='IBAN:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAccount_InformationAccess().getIBANKeyword_0());
    }
(
(
		lv_iban_1_0=RULE_STRING
		{
			newLeafNode(lv_iban_1_0, grammarAccess.getAccount_InformationAccess().getIbanSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccount_InformationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"iban",
        		lv_iban_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='BIC:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAccount_InformationAccess().getBICKeyword_2());
    }
(
(
		lv_bic_3_0=RULE_STRING
		{
			newLeafNode(lv_bic_3_0, grammarAccess.getAccount_InformationAccess().getBicSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccount_InformationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bic",
        		lv_bic_3_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleSong
entryRuleSong returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSongRule()); }
	 iv_ruleSong=ruleSong 
	 { $current=$iv_ruleSong.current; } 
	 EOF 
;

// Rule Song
ruleSong returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSongAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSongRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='sung by' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSongAccess().getSungByKeyword_1());
    }
(
(
		lv_artist_2_0=RULE_STRING
		{
			newLeafNode(lv_artist_2_0, grammarAccess.getSongAccess().getArtistSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSongRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"artist",
        		lv_artist_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='produced by' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSongAccess().getProducedByKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSongRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getSongAccess().getDistDistributorCrossReference_4_0()); 
	}

)
)	otherlv_5='length:' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSongAccess().getLengthKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSongAccess().getLengthTimeParserRuleCall_6_0()); 
	    }
		lv_length_6_0=ruleTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSongRule());
	        }
       		set(
       			$current, 
       			"length",
        		lv_length_6_0, 
        		"Time");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='genre:' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSongAccess().getGenreKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSongAccess().getGenreGenreEnumRuleCall_8_0()); 
	    }
		lv_genre_8_0=ruleGenre		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSongRule());
	        }
       		set(
       			$current, 
       			"genre",
        		lv_genre_8_0, 
        		"Genre");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='price:' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSongAccess().getPriceKeyword_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSongAccess().getPriceDoubleParserRuleCall_10_0()); 
	    }
		lv_price_10_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSongRule());
	        }
       		set(
       			$current, 
       			"price",
        		lv_price_10_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	 iv_ruleTime=ruleTime 
	 { $current=$iv_ruleTime.current; } 
	 EOF 
;

// Rule Time
ruleTime returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_min_0_0=RULE_INT
		{
			newLeafNode(lv_min_0_0, grammarAccess.getTimeAccess().getMinINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"min",
        		lv_min_0_0, 
        		"INT");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTimeAccess().getColonKeyword_1());
    }
(
(
		lv_sec_2_0=RULE_INT
		{
			newLeafNode(lv_sec_2_0, grammarAccess.getTimeAccess().getSecINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sec",
        		lv_sec_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleRule()); } 
	 iv_ruleDouble=ruleDouble 
	 { $current=$iv_ruleDouble.current.getText(); }  
	 EOF 
;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRulePlaylist
entryRulePlaylist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlaylistRule()); }
	 iv_rulePlaylist=rulePlaylist 
	 { $current=$iv_rulePlaylist.current; } 
	 EOF 
;

// Rule Playlist
rulePlaylist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPlaylistAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlaylistRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=' consists of' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPlaylistAccess().getConsistsOfKeyword_1());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlaylistRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getPlaylistAccess().getSongsSongCrossReference_2_0_0()); 
	}

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPlaylistAccess().getCommaKeyword_2_1());
    }
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlaylistRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getPlaylistAccess().getSongsSongCrossReference_3_0()); 
	}

)
)?(	otherlv_5='Playlist' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPlaylistAccess().getPlaylistKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlaylistRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getPlaylistAccess().getInclPlaylistCrossReference_4_1_0()); 
	}

)
)(	otherlv_7='without' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPlaylistAccess().getWithoutKeyword_4_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlaylistRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getPlaylistAccess().getExclSongCrossReference_4_2_1_0()); 
	}

)
))?)*)
;





// Rule Genre
ruleGenre returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='POP' 
	{
        $current = grammarAccess.getGenreAccess().getPopEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGenreAccess().getPopEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='ROCK' 
	{
        $current = grammarAccess.getGenreAccess().getRockEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGenreAccess().getRockEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='HARDROCK' 
	{
        $current = grammarAccess.getGenreAccess().getHardrockEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getGenreAccess().getHardrockEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='CLASSIC' 
	{
        $current = grammarAccess.getGenreAccess().getClassicEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getGenreAccess().getClassicEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='FOLK' 
	{
        $current = grammarAccess.getGenreAccess().getFolkEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getGenreAccess().getFolkEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='OTHER' 
	{
        $current = grammarAccess.getGenreAccess().getOtherEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getGenreAccess().getOtherEnumLiteralDeclaration_5()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


