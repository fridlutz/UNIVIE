/*
* generated by Xtext
*/
package at.ac.univie.swa.ase2014.a1276754.task3.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MydslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDistributorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistributorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistributorsDistributorParserRuleCall_1_0 = (RuleCall)cDistributorsAssignment_1.eContents().get(0);
		private final Keyword cLibraryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSongsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSongsSongParserRuleCall_3_0 = (RuleCall)cSongsAssignment_3.eContents().get(0);
		private final Keyword cPlaylistsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPlaylistsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPlaylistsPlaylistParserRuleCall_5_0 = (RuleCall)cPlaylistsAssignment_5.eContents().get(0);
		
		//Model:
		//	"Distributors:" distributors+=Distributor+ "Library:" songs+=Song+ "Playlists:" playlists+=Playlist*;
		public ParserRule getRule() { return rule; }

		//"Distributors:" distributors+=Distributor+ "Library:" songs+=Song+ "Playlists:" playlists+=Playlist*
		public Group getGroup() { return cGroup; }

		//"Distributors:"
		public Keyword getDistributorsKeyword_0() { return cDistributorsKeyword_0; }

		//distributors+=Distributor+
		public Assignment getDistributorsAssignment_1() { return cDistributorsAssignment_1; }

		//Distributor
		public RuleCall getDistributorsDistributorParserRuleCall_1_0() { return cDistributorsDistributorParserRuleCall_1_0; }

		//"Library:"
		public Keyword getLibraryKeyword_2() { return cLibraryKeyword_2; }

		//songs+=Song+
		public Assignment getSongsAssignment_3() { return cSongsAssignment_3; }

		//Song
		public RuleCall getSongsSongParserRuleCall_3_0() { return cSongsSongParserRuleCall_3_0; }

		//"Playlists:"
		public Keyword getPlaylistsKeyword_4() { return cPlaylistsKeyword_4; }

		//playlists+=Playlist*
		public Assignment getPlaylistsAssignment_5() { return cPlaylistsAssignment_5; }

		//Playlist
		public RuleCall getPlaylistsPlaylistParserRuleCall_5_0() { return cPlaylistsPlaylistParserRuleCall_5_0; }
	}

	public class DistributorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Distributor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAddressKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAdresseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdresseSTRINGTerminalRuleCall_2_0 = (RuleCall)cAdresseAssignment_2.eContents().get(0);
		private final Keyword cAccountInformationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAcc_infoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAcc_infoAccount_InformationParserRuleCall_4_0 = (RuleCall)cAcc_infoAssignment_4.eContents().get(0);
		
		//Distributor:
		//	name=ID "Address:" adresse=STRING "Account Information:" acc_info=Account_Information;
		public ParserRule getRule() { return rule; }

		//name=ID "Address:" adresse=STRING "Account Information:" acc_info=Account_Information
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"Address:"
		public Keyword getAddressKeyword_1() { return cAddressKeyword_1; }

		//adresse=STRING
		public Assignment getAdresseAssignment_2() { return cAdresseAssignment_2; }

		//STRING
		public RuleCall getAdresseSTRINGTerminalRuleCall_2_0() { return cAdresseSTRINGTerminalRuleCall_2_0; }

		//"Account Information:"
		public Keyword getAccountInformationKeyword_3() { return cAccountInformationKeyword_3; }

		//acc_info=Account_Information
		public Assignment getAcc_infoAssignment_4() { return cAcc_infoAssignment_4; }

		//Account_Information
		public RuleCall getAcc_infoAccount_InformationParserRuleCall_4_0() { return cAcc_infoAccount_InformationParserRuleCall_4_0; }
	}

	public class Account_InformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Account_Information");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIBANKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIbanAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIbanSTRINGTerminalRuleCall_1_0 = (RuleCall)cIbanAssignment_1.eContents().get(0);
		private final Keyword cBICKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBicAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBicSTRINGTerminalRuleCall_3_0 = (RuleCall)cBicAssignment_3.eContents().get(0);
		
		//Account_Information:
		//	"IBAN:" iban=STRING "BIC:" bic=STRING;
		public ParserRule getRule() { return rule; }

		//"IBAN:" iban=STRING "BIC:" bic=STRING
		public Group getGroup() { return cGroup; }

		//"IBAN:"
		public Keyword getIBANKeyword_0() { return cIBANKeyword_0; }

		//iban=STRING
		public Assignment getIbanAssignment_1() { return cIbanAssignment_1; }

		//STRING
		public RuleCall getIbanSTRINGTerminalRuleCall_1_0() { return cIbanSTRINGTerminalRuleCall_1_0; }

		//"BIC:"
		public Keyword getBICKeyword_2() { return cBICKeyword_2; }

		//bic=STRING
		public Assignment getBicAssignment_3() { return cBicAssignment_3; }

		//STRING
		public RuleCall getBicSTRINGTerminalRuleCall_3_0() { return cBicSTRINGTerminalRuleCall_3_0; }
	}

	public class SongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Song");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cSungByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArtistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArtistSTRINGTerminalRuleCall_2_0 = (RuleCall)cArtistAssignment_2.eContents().get(0);
		private final Keyword cProducedByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDistAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDistDistributorCrossReference_4_0 = (CrossReference)cDistAssignment_4.eContents().get(0);
		private final RuleCall cDistDistributorIDTerminalRuleCall_4_0_1 = (RuleCall)cDistDistributorCrossReference_4_0.eContents().get(1);
		private final Keyword cLengthKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLengthAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLengthTimeParserRuleCall_6_0 = (RuleCall)cLengthAssignment_6.eContents().get(0);
		private final Keyword cGenreKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cGenreAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cGenreGenreEnumRuleCall_8_0 = (RuleCall)cGenreAssignment_8.eContents().get(0);
		private final Keyword cPriceKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cPriceAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cPriceDoubleParserRuleCall_10_0 = (RuleCall)cPriceAssignment_10.eContents().get(0);
		
		//Song:
		//	name=ID "sung by" artist=STRING "produced by" dist=[Distributor] "length:" length=Time "genre:" genre=Genre "price:"
		//	price=Double;
		public ParserRule getRule() { return rule; }

		//name=ID "sung by" artist=STRING "produced by" dist=[Distributor] "length:" length=Time "genre:" genre=Genre "price:"
		//price=Double
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"sung by"
		public Keyword getSungByKeyword_1() { return cSungByKeyword_1; }

		//artist=STRING
		public Assignment getArtistAssignment_2() { return cArtistAssignment_2; }

		//STRING
		public RuleCall getArtistSTRINGTerminalRuleCall_2_0() { return cArtistSTRINGTerminalRuleCall_2_0; }

		//"produced by"
		public Keyword getProducedByKeyword_3() { return cProducedByKeyword_3; }

		//dist=[Distributor]
		public Assignment getDistAssignment_4() { return cDistAssignment_4; }

		//[Distributor]
		public CrossReference getDistDistributorCrossReference_4_0() { return cDistDistributorCrossReference_4_0; }

		//ID
		public RuleCall getDistDistributorIDTerminalRuleCall_4_0_1() { return cDistDistributorIDTerminalRuleCall_4_0_1; }

		//"length:"
		public Keyword getLengthKeyword_5() { return cLengthKeyword_5; }

		//length=Time
		public Assignment getLengthAssignment_6() { return cLengthAssignment_6; }

		//Time
		public RuleCall getLengthTimeParserRuleCall_6_0() { return cLengthTimeParserRuleCall_6_0; }

		//"genre:"
		public Keyword getGenreKeyword_7() { return cGenreKeyword_7; }

		//genre=Genre
		public Assignment getGenreAssignment_8() { return cGenreAssignment_8; }

		//Genre
		public RuleCall getGenreGenreEnumRuleCall_8_0() { return cGenreGenreEnumRuleCall_8_0; }

		//"price:"
		public Keyword getPriceKeyword_9() { return cPriceKeyword_9; }

		//price=Double
		public Assignment getPriceAssignment_10() { return cPriceAssignment_10; }

		//Double
		public RuleCall getPriceDoubleParserRuleCall_10_0() { return cPriceDoubleParserRuleCall_10_0; }
	}

	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMinINTTerminalRuleCall_0_0 = (RuleCall)cMinAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecINTTerminalRuleCall_2_0 = (RuleCall)cSecAssignment_2.eContents().get(0);
		
		////Artist:
		////	name=ID
		////;
		//Time:
		//	min=INT ":" sec=INT;
		public ParserRule getRule() { return rule; }

		//min=INT ":" sec=INT
		public Group getGroup() { return cGroup; }

		//min=INT
		public Assignment getMinAssignment_0() { return cMinAssignment_0; }

		//INT
		public RuleCall getMinINTTerminalRuleCall_0_0() { return cMinINTTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//sec=INT
		public Assignment getSecAssignment_2() { return cSecAssignment_2; }

		//INT
		public RuleCall getSecINTTerminalRuleCall_2_0() { return cSecINTTerminalRuleCall_2_0; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class PlaylistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Playlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cConsistsOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSongsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cSongsSongCrossReference_2_0_0 = (CrossReference)cSongsAssignment_2_0.eContents().get(0);
		private final RuleCall cSongsSongIDTerminalRuleCall_2_0_0_1 = (RuleCall)cSongsSongCrossReference_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSongsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSongsSongCrossReference_3_0 = (CrossReference)cSongsAssignment_3.eContents().get(0);
		private final RuleCall cSongsSongIDTerminalRuleCall_3_0_1 = (RuleCall)cSongsSongCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPlaylistKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInclAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInclPlaylistCrossReference_4_1_0 = (CrossReference)cInclAssignment_4_1.eContents().get(0);
		private final RuleCall cInclPlaylistIDTerminalRuleCall_4_1_0_1 = (RuleCall)cInclPlaylistCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cWithoutKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cExclAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cExclSongCrossReference_4_2_1_0 = (CrossReference)cExclAssignment_4_2_1.eContents().get(0);
		private final RuleCall cExclSongIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cExclSongCrossReference_4_2_1_0.eContents().get(1);
		
		//Playlist:
		//	name=ID " consists of" (songs+=[Song] ",")* songs+=[Song]? ("Playlist" incl+=[Playlist] //		('without' (excl+= [Song]',')* excl+= [Song] )?
		//	("without" excl+=[Song])?)*;
		public ParserRule getRule() { return rule; }

		//name=ID " consists of" (songs+=[Song] ",")* songs+=[Song]? ("Playlist" incl+=[Playlist] //		('without' (excl+= [Song]',')* excl+= [Song] )?
		//("without" excl+=[Song])?)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//" consists of"
		public Keyword getConsistsOfKeyword_1() { return cConsistsOfKeyword_1; }

		//(songs+=[Song] ",")*
		public Group getGroup_2() { return cGroup_2; }

		//songs+=[Song]
		public Assignment getSongsAssignment_2_0() { return cSongsAssignment_2_0; }

		//[Song]
		public CrossReference getSongsSongCrossReference_2_0_0() { return cSongsSongCrossReference_2_0_0; }

		//ID
		public RuleCall getSongsSongIDTerminalRuleCall_2_0_0_1() { return cSongsSongIDTerminalRuleCall_2_0_0_1; }

		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//songs+=[Song]?
		public Assignment getSongsAssignment_3() { return cSongsAssignment_3; }

		//[Song]
		public CrossReference getSongsSongCrossReference_3_0() { return cSongsSongCrossReference_3_0; }

		//ID
		public RuleCall getSongsSongIDTerminalRuleCall_3_0_1() { return cSongsSongIDTerminalRuleCall_3_0_1; }

		//("Playlist" incl+=[Playlist] //		('without' (excl+= [Song]',')* excl+= [Song] )?
		//("without" excl+=[Song])?)*
		public Group getGroup_4() { return cGroup_4; }

		//"Playlist"
		public Keyword getPlaylistKeyword_4_0() { return cPlaylistKeyword_4_0; }

		//incl+=[Playlist]
		public Assignment getInclAssignment_4_1() { return cInclAssignment_4_1; }

		//[Playlist]
		public CrossReference getInclPlaylistCrossReference_4_1_0() { return cInclPlaylistCrossReference_4_1_0; }

		//ID
		public RuleCall getInclPlaylistIDTerminalRuleCall_4_1_0_1() { return cInclPlaylistIDTerminalRuleCall_4_1_0_1; }

		//("without" excl+=[Song])?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"without"
		public Keyword getWithoutKeyword_4_2_0() { return cWithoutKeyword_4_2_0; }

		//excl+=[Song]
		public Assignment getExclAssignment_4_2_1() { return cExclAssignment_4_2_1; }

		//[Song]
		public CrossReference getExclSongCrossReference_4_2_1_0() { return cExclSongCrossReference_4_2_1_0; }

		//ID
		public RuleCall getExclSongIDTerminalRuleCall_4_2_1_0_1() { return cExclSongIDTerminalRuleCall_4_2_1_0_1; }
	}
	
	
	public class GenreElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Genre");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPopEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPopPOPKeyword_0_0 = (Keyword)cPopEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRockEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRockROCKKeyword_1_0 = (Keyword)cRockEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHardrockEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHardrockHARDROCKKeyword_2_0 = (Keyword)cHardrockEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cClassicEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cClassicCLASSICKeyword_3_0 = (Keyword)cClassicEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFolkEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFolkFOLKKeyword_4_0 = (Keyword)cFolkEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOtherEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOtherOTHERKeyword_5_0 = (Keyword)cOtherEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Genre:
		//	pop="POP" | rock="ROCK" | hardrock="HARDROCK" | classic="CLASSIC" | folk="FOLK" | other="OTHER";
		public EnumRule getRule() { return rule; }

		//pop="POP" | rock="ROCK" | hardrock="HARDROCK" | classic="CLASSIC" | folk="FOLK" | other="OTHER"
		public Alternatives getAlternatives() { return cAlternatives; }

		//pop="POP"
		public EnumLiteralDeclaration getPopEnumLiteralDeclaration_0() { return cPopEnumLiteralDeclaration_0; }

		//"POP"
		public Keyword getPopPOPKeyword_0_0() { return cPopPOPKeyword_0_0; }

		//rock="ROCK"
		public EnumLiteralDeclaration getRockEnumLiteralDeclaration_1() { return cRockEnumLiteralDeclaration_1; }

		//"ROCK"
		public Keyword getRockROCKKeyword_1_0() { return cRockROCKKeyword_1_0; }

		//hardrock="HARDROCK"
		public EnumLiteralDeclaration getHardrockEnumLiteralDeclaration_2() { return cHardrockEnumLiteralDeclaration_2; }

		//"HARDROCK"
		public Keyword getHardrockHARDROCKKeyword_2_0() { return cHardrockHARDROCKKeyword_2_0; }

		//classic="CLASSIC"
		public EnumLiteralDeclaration getClassicEnumLiteralDeclaration_3() { return cClassicEnumLiteralDeclaration_3; }

		//"CLASSIC"
		public Keyword getClassicCLASSICKeyword_3_0() { return cClassicCLASSICKeyword_3_0; }

		//folk="FOLK"
		public EnumLiteralDeclaration getFolkEnumLiteralDeclaration_4() { return cFolkEnumLiteralDeclaration_4; }

		//"FOLK"
		public Keyword getFolkFOLKKeyword_4_0() { return cFolkFOLKKeyword_4_0; }

		//other="OTHER"
		public EnumLiteralDeclaration getOtherEnumLiteralDeclaration_5() { return cOtherEnumLiteralDeclaration_5; }

		//"OTHER"
		public Keyword getOtherOTHERKeyword_5_0() { return cOtherOTHERKeyword_5_0; }
	}
	
	private final ModelElements pModel;
	private final DistributorElements pDistributor;
	private final Account_InformationElements pAccount_Information;
	private final SongElements pSong;
	private final TimeElements pTime;
	private final DoubleElements pDouble;
	private final PlaylistElements pPlaylist;
	private final GenreElements unknownRuleGenre;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MydslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDistributor = new DistributorElements();
		this.pAccount_Information = new Account_InformationElements();
		this.pSong = new SongElements();
		this.pTime = new TimeElements();
		this.pDouble = new DoubleElements();
		this.pPlaylist = new PlaylistElements();
		this.unknownRuleGenre = new GenreElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.univie.swa.ase2014.a1276754.task3.Mydsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"Distributors:" distributors+=Distributor+ "Library:" songs+=Song+ "Playlists:" playlists+=Playlist*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Distributor:
	//	name=ID "Address:" adresse=STRING "Account Information:" acc_info=Account_Information;
	public DistributorElements getDistributorAccess() {
		return pDistributor;
	}
	
	public ParserRule getDistributorRule() {
		return getDistributorAccess().getRule();
	}

	//Account_Information:
	//	"IBAN:" iban=STRING "BIC:" bic=STRING;
	public Account_InformationElements getAccount_InformationAccess() {
		return pAccount_Information;
	}
	
	public ParserRule getAccount_InformationRule() {
		return getAccount_InformationAccess().getRule();
	}

	//Song:
	//	name=ID "sung by" artist=STRING "produced by" dist=[Distributor] "length:" length=Time "genre:" genre=Genre "price:"
	//	price=Double;
	public SongElements getSongAccess() {
		return pSong;
	}
	
	public ParserRule getSongRule() {
		return getSongAccess().getRule();
	}

	////Artist:
	////	name=ID
	////;
	//Time:
	//	min=INT ":" sec=INT;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}

	//Double:
	//	INT "." INT;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//Playlist:
	//	name=ID " consists of" (songs+=[Song] ",")* songs+=[Song]? ("Playlist" incl+=[Playlist] //		('without' (excl+= [Song]',')* excl+= [Song] )?
	//	("without" excl+=[Song])?)*;
	public PlaylistElements getPlaylistAccess() {
		return pPlaylist;
	}
	
	public ParserRule getPlaylistRule() {
		return getPlaylistAccess().getRule();
	}

	//enum Genre:
	//	pop="POP" | rock="ROCK" | hardrock="HARDROCK" | classic="CLASSIC" | folk="FOLK" | other="OTHER";
	public GenreElements getGenreAccess() {
		return unknownRuleGenre;
	}
	
	public EnumRule getGenreRule() {
		return getGenreAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
