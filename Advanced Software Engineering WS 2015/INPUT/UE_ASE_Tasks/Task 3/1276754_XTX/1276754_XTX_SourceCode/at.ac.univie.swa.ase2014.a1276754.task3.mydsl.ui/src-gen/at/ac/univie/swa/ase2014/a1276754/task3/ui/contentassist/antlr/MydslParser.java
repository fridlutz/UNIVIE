/*
* generated by Xtext
*/
package at.ac.univie.swa.ase2014.a1276754.task3.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.ac.univie.swa.ase2014.a1276754.task3.services.MydslGrammarAccess;

public class MydslParser extends AbstractContentAssistParser {
	
	@Inject
	private MydslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.ac.univie.swa.ase2014.a1276754.task3.ui.contentassist.antlr.internal.InternalMydslParser createParser() {
		at.ac.univie.swa.ase2014.a1276754.task3.ui.contentassist.antlr.internal.InternalMydslParser result = new at.ac.univie.swa.ase2014.a1276754.task3.ui.contentassist.antlr.internal.InternalMydslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getGenreAccess().getAlternatives(), "rule__Genre__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getDistributorAccess().getGroup(), "rule__Distributor__Group__0");
					put(grammarAccess.getAccount_InformationAccess().getGroup(), "rule__Account_Information__Group__0");
					put(grammarAccess.getSongAccess().getGroup(), "rule__Song__Group__0");
					put(grammarAccess.getTimeAccess().getGroup(), "rule__Time__Group__0");
					put(grammarAccess.getDoubleAccess().getGroup(), "rule__Double__Group__0");
					put(grammarAccess.getPlaylistAccess().getGroup(), "rule__Playlist__Group__0");
					put(grammarAccess.getPlaylistAccess().getGroup_2(), "rule__Playlist__Group_2__0");
					put(grammarAccess.getPlaylistAccess().getGroup_4(), "rule__Playlist__Group_4__0");
					put(grammarAccess.getPlaylistAccess().getGroup_4_2(), "rule__Playlist__Group_4_2__0");
					put(grammarAccess.getModelAccess().getDistributorsAssignment_1(), "rule__Model__DistributorsAssignment_1");
					put(grammarAccess.getModelAccess().getSongsAssignment_3(), "rule__Model__SongsAssignment_3");
					put(grammarAccess.getModelAccess().getPlaylistsAssignment_5(), "rule__Model__PlaylistsAssignment_5");
					put(grammarAccess.getDistributorAccess().getNameAssignment_0(), "rule__Distributor__NameAssignment_0");
					put(grammarAccess.getDistributorAccess().getAdresseAssignment_2(), "rule__Distributor__AdresseAssignment_2");
					put(grammarAccess.getDistributorAccess().getAcc_infoAssignment_4(), "rule__Distributor__Acc_infoAssignment_4");
					put(grammarAccess.getAccount_InformationAccess().getIbanAssignment_1(), "rule__Account_Information__IbanAssignment_1");
					put(grammarAccess.getAccount_InformationAccess().getBicAssignment_3(), "rule__Account_Information__BicAssignment_3");
					put(grammarAccess.getSongAccess().getNameAssignment_0(), "rule__Song__NameAssignment_0");
					put(grammarAccess.getSongAccess().getArtistAssignment_2(), "rule__Song__ArtistAssignment_2");
					put(grammarAccess.getSongAccess().getDistAssignment_4(), "rule__Song__DistAssignment_4");
					put(grammarAccess.getSongAccess().getLengthAssignment_6(), "rule__Song__LengthAssignment_6");
					put(grammarAccess.getSongAccess().getGenreAssignment_8(), "rule__Song__GenreAssignment_8");
					put(grammarAccess.getSongAccess().getPriceAssignment_10(), "rule__Song__PriceAssignment_10");
					put(grammarAccess.getTimeAccess().getMinAssignment_0(), "rule__Time__MinAssignment_0");
					put(grammarAccess.getTimeAccess().getSecAssignment_2(), "rule__Time__SecAssignment_2");
					put(grammarAccess.getPlaylistAccess().getNameAssignment_0(), "rule__Playlist__NameAssignment_0");
					put(grammarAccess.getPlaylistAccess().getSongsAssignment_2_0(), "rule__Playlist__SongsAssignment_2_0");
					put(grammarAccess.getPlaylistAccess().getSongsAssignment_3(), "rule__Playlist__SongsAssignment_3");
					put(grammarAccess.getPlaylistAccess().getInclAssignment_4_1(), "rule__Playlist__InclAssignment_4_1");
					put(grammarAccess.getPlaylistAccess().getExclAssignment_4_2_1(), "rule__Playlist__ExclAssignment_4_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.ac.univie.swa.ase2014.a1276754.task3.ui.contentassist.antlr.internal.InternalMydslParser typedParser = (at.ac.univie.swa.ase2014.a1276754.task3.ui.contentassist.antlr.internal.InternalMydslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MydslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MydslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
