/**
 */
package aSE_Task2.provider;

import aSE_Task2.util.ASE_Task2AdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ASE_Task2ItemProviderAdapterFactory extends ASE_Task2AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ASE_Task2ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.Account} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountItemProvider accountItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.Account}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountAdapter() {
		if (accountItemProvider == null) {
			accountItemProvider = new AccountItemProvider(this);
		}

		return accountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.Profile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProfileItemProvider profileItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.Profile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProfileAdapter() {
		if (profileItemProvider == null) {
			profileItemProvider = new ProfileItemProvider(this);
		}

		return profileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.Review} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReviewItemProvider reviewItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.Review}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReviewAdapter() {
		if (reviewItemProvider == null) {
			reviewItemProvider = new ReviewItemProvider(this);
		}

		return reviewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.Distributor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistributorItemProvider distributorItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.Distributor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistributorAdapter() {
		if (distributorItemProvider == null) {
			distributorItemProvider = new DistributorItemProvider(this);
		}

		return distributorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.Movie} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MovieItemProvider movieItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.Movie}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMovieAdapter() {
		if (movieItemProvider == null) {
			movieItemProvider = new MovieItemProvider(this);
		}

		return movieItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.Music} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MusicItemProvider musicItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.Music}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMusicAdapter() {
		if (musicItemProvider == null) {
			musicItemProvider = new MusicItemProvider(this);
		}

		return musicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.TV_Series} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TV_SeriesItemProvider tV_SeriesItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.TV_Series}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTV_SeriesAdapter() {
		if (tV_SeriesItemProvider == null) {
			tV_SeriesItemProvider = new TV_SeriesItemProvider(this);
		}

		return tV_SeriesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.RentalMovie} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RentalMovieItemProvider rentalMovieItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.RentalMovie}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRentalMovieAdapter() {
		if (rentalMovieItemProvider == null) {
			rentalMovieItemProvider = new RentalMovieItemProvider(this);
		}

		return rentalMovieItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.RentalMusic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RentalMusicItemProvider rentalMusicItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.RentalMusic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRentalMusicAdapter() {
		if (rentalMusicItemProvider == null) {
			rentalMusicItemProvider = new RentalMusicItemProvider(this);
		}

		return rentalMusicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.RentalTV_Series} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RentalTV_SeriesItemProvider rentalTV_SeriesItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.RentalTV_Series}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRentalTV_SeriesAdapter() {
		if (rentalTV_SeriesItemProvider == null) {
			rentalTV_SeriesItemProvider = new RentalTV_SeriesItemProvider(this);
		}

		return rentalTV_SeriesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aSE_Task2.Library} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibraryItemProvider libraryItemProvider;

	/**
	 * This creates an adapter for a {@link aSE_Task2.Library}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibraryAdapter() {
		if (libraryItemProvider == null) {
			libraryItemProvider = new LibraryItemProvider(this);
		}

		return libraryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (accountItemProvider != null) accountItemProvider.dispose();
		if (profileItemProvider != null) profileItemProvider.dispose();
		if (reviewItemProvider != null) reviewItemProvider.dispose();
		if (distributorItemProvider != null) distributorItemProvider.dispose();
		if (movieItemProvider != null) movieItemProvider.dispose();
		if (musicItemProvider != null) musicItemProvider.dispose();
		if (tV_SeriesItemProvider != null) tV_SeriesItemProvider.dispose();
		if (rentalMovieItemProvider != null) rentalMovieItemProvider.dispose();
		if (rentalMusicItemProvider != null) rentalMusicItemProvider.dispose();
		if (rentalTV_SeriesItemProvider != null) rentalTV_SeriesItemProvider.dispose();
		if (libraryItemProvider != null) libraryItemProvider.dispose();
	}

}
