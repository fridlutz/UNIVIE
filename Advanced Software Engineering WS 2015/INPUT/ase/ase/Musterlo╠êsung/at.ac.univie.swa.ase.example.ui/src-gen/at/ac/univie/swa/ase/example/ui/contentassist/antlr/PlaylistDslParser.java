/*
* generated by Xtext
*/
package at.ac.univie.swa.ase.example.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.ac.univie.swa.ase.example.services.PlaylistDslGrammarAccess;

public class PlaylistDslParser extends AbstractContentAssistParser {
	
	@Inject
	private PlaylistDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.ac.univie.swa.ase.example.ui.contentassist.antlr.internal.InternalPlaylistDslParser createParser() {
		at.ac.univie.swa.ase.example.ui.contentassist.antlr.internal.InternalPlaylistDslParser result = new at.ac.univie.swa.ase.example.ui.contentassist.antlr.internal.InternalPlaylistDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPlaylistItemAccess().getAlternatives(), "rule__PlaylistItem__Alternatives");
					put(grammarAccess.getItemAccess().getAlternatives(), "rule__Item__Alternatives");
					put(grammarAccess.getGenreAccess().getAlternatives(), "rule__Genre__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getPlaylistAccess().getGroup(), "rule__Playlist__Group__0");
					put(grammarAccess.getPlaylistAccess().getGroup_3(), "rule__Playlist__Group_3__0");
					put(grammarAccess.getLibraryAccess().getGroup(), "rule__Library__Group__0");
					put(grammarAccess.getItemAccess().getGroup_1(), "rule__Item__Group_1__0");
					put(grammarAccess.getItemAccess().getGroup_1_2(), "rule__Item__Group_1_2__0");
					put(grammarAccess.getItemAccess().getGroup_1_2_3(), "rule__Item__Group_1_2_3__0");
					put(grammarAccess.getSongAccess().getGroup(), "rule__Song__Group__0");
					put(grammarAccess.getLengthAccess().getGroup(), "rule__Length__Group__0");
					put(grammarAccess.getDistributorAccess().getGroup(), "rule__Distributor__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getModelAccess().getDistributorsAssignment_2(), "rule__Model__DistributorsAssignment_2");
					put(grammarAccess.getModelAccess().getSongLibraryAssignment_4(), "rule__Model__SongLibraryAssignment_4");
					put(grammarAccess.getModelAccess().getPlaylistsAssignment_6(), "rule__Model__PlaylistsAssignment_6");
					put(grammarAccess.getPlaylistAccess().getNameAssignment_0(), "rule__Playlist__NameAssignment_0");
					put(grammarAccess.getPlaylistAccess().getItemsAssignment_2(), "rule__Playlist__ItemsAssignment_2");
					put(grammarAccess.getPlaylistAccess().getItemsAssignment_3_1(), "rule__Playlist__ItemsAssignment_3_1");
					put(grammarAccess.getLibraryAccess().getNameAssignment_1(), "rule__Library__NameAssignment_1");
					put(grammarAccess.getLibraryAccess().getSongsAssignment_3(), "rule__Library__SongsAssignment_3");
					put(grammarAccess.getItemAccess().getItemAssignment_0(), "rule__Item__ItemAssignment_0");
					put(grammarAccess.getItemAccess().getItemAssignment_1_1(), "rule__Item__ItemAssignment_1_1");
					put(grammarAccess.getItemAccess().getExcludedAssignment_1_2_2(), "rule__Item__ExcludedAssignment_1_2_2");
					put(grammarAccess.getItemAccess().getExcludedAssignment_1_2_3_1(), "rule__Item__ExcludedAssignment_1_2_3_1");
					put(grammarAccess.getSongAccess().getNameAssignment_1(), "rule__Song__NameAssignment_1");
					put(grammarAccess.getSongAccess().getArtistAssignment_3(), "rule__Song__ArtistAssignment_3");
					put(grammarAccess.getSongAccess().getDistributorAssignment_5(), "rule__Song__DistributorAssignment_5");
					put(grammarAccess.getSongAccess().getLengthAssignment_7(), "rule__Song__LengthAssignment_7");
					put(grammarAccess.getSongAccess().getGenreAssignment_9(), "rule__Song__GenreAssignment_9");
					put(grammarAccess.getSongAccess().getPriceAssignment_11(), "rule__Song__PriceAssignment_11");
					put(grammarAccess.getLengthAccess().getMinutesAssignment_0(), "rule__Length__MinutesAssignment_0");
					put(grammarAccess.getLengthAccess().getSecondsAssignment_2(), "rule__Length__SecondsAssignment_2");
					put(grammarAccess.getDistributorAccess().getNameAssignment_1(), "rule__Distributor__NameAssignment_1");
					put(grammarAccess.getDistributorAccess().getAddressAssignment_3(), "rule__Distributor__AddressAssignment_3");
					put(grammarAccess.getDistributorAccess().getIbanAssignment_6(), "rule__Distributor__IbanAssignment_6");
					put(grammarAccess.getDistributorAccess().getBicAssignment_8(), "rule__Distributor__BicAssignment_8");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.ac.univie.swa.ase.example.ui.contentassist.antlr.internal.InternalPlaylistDslParser typedParser = (at.ac.univie.swa.ase.example.ui.contentassist.antlr.internal.InternalPlaylistDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PlaylistDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PlaylistDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
