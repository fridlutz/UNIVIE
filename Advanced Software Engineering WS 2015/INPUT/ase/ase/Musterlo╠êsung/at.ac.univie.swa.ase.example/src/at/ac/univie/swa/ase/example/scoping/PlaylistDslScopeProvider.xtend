/*
 * generated by Xtext
 */
package at.ac.univie.swa.ase.example.scoping

import at.ac.univie.swa.ase.example.PlayListUtils
import at.ac.univie.swa.ase.example.playlistDsl.Item
import at.ac.univie.swa.ase.example.playlistDsl.Playlist
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
 
 
class PlaylistDslScopeProvider extends AbstractDeclarativeScopeProvider {
	
	extension PlayListUtils utils = new PlayListUtils();

	/**
	 * This scope is actually wrong - it does not resolve child lists
	 */
	def scope_Item_excluded(Item context, EReference reference) {
		if (context.item instanceof Playlist) {
			
			val songsInList = context.item.songs
			return Scopes::scopeFor(songsInList);
		} else
			return delegate.getScope(context, reference)
			
	}	
}
