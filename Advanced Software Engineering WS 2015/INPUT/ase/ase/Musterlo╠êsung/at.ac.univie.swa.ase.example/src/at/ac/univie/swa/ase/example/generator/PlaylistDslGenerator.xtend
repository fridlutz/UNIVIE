/*
 * generated by Xtext
 */
package at.ac.univie.swa.ase.example.generator

import at.ac.univie.swa.ase.example.PlayListUtils
import at.ac.univie.swa.ase.example.playlistDsl.Distributor
import at.ac.univie.swa.ase.example.playlistDsl.Model
import at.ac.univie.swa.ase.example.playlistDsl.Playlist
import at.ac.univie.swa.ase.example.playlistDsl.Song
import java.util.HashMap
import java.util.Map
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class PlaylistDslGenerator implements IGenerator {
	extension PlayListUtils utils = new PlayListUtils();

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val root = resource.allContents.filter(typeof(Model)).head;
		val earnings = new HashMap<Distributor,Double>;
		for (Playlist p : root.playlists) {
			fsa.generateFile('''«p.name».html''', p.compile(earnings));
		
		}
		fsa.generateFile("earnings.html",earnings.print);
	}

	def String print(Map<Distributor,Double> earnings) {
		val distributors = earnings.keySet.sortBy[d|earnings.get(d)].reverse
		
		return '''
		<html>
		<head>Earningstable</head>
		<body>
		<table>
		<tr><td>distributor.name</td><td>amount</td></tr>
		«FOR d : distributors»
		<tr><td>«d.name»</td><td>«earnings.get(d)»</td></tr>
		«ENDFOR»
		</table>
		</body>
		</html>
		'''
		
	}

	def dispatch String compile(Playlist p, Map<Distributor,Double> earnings) {
		return
		'''
		<html>
		<head>Playlist Table for «p.name»</head>
		<body>
		<table>
		<tr><td>name</td><td>distributor.name</td><td>length</td><td>price</td></tr>
		«FOR s: p.songs»
		«s.compile(earnings)»
		«ENDFOR»
		</table>
		</body>
		</html>
		''';
	}
	
	def dispatch String compile (Song s, Map<Distributor,Double> earnings) {
		var value = 0.0;
		if(earnings.containsKey(s.distributor)) {
			value = earnings.get(s.distributor);
		}
		value = value + s.price;
		earnings.put(s.distributor,value)
		return '''<tr><td>«s.name»</td><td>«s.distributor.name»</td><td>«s.length.minutes»:«s.length.seconds»</td><td>«s.price»</td></tr>'''
	}
}
