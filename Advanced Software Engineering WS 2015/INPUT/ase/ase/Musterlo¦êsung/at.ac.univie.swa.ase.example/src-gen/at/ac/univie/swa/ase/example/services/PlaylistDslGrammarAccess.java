/*
* generated by Xtext
*/
package at.ac.univie.swa.ase.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PlaylistDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDistributorsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistributorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistributorsDistributorParserRuleCall_2_0 = (RuleCall)cDistributorsAssignment_2.eContents().get(0);
		private final Keyword cLibraryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSongLibraryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSongLibraryLibraryParserRuleCall_4_0 = (RuleCall)cSongLibraryAssignment_4.eContents().get(0);
		private final Keyword cPlaylistsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPlaylistsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPlaylistsPlaylistParserRuleCall_6_0 = (RuleCall)cPlaylistsAssignment_6.eContents().get(0);
		
		//Model:
		//	{Model} "Distributors:" distributors+=Distributor+ "Library:" songLibrary+=Library+ "Playlists:" playlists+=Playlist*;
		public ParserRule getRule() { return rule; }

		//{Model} "Distributors:" distributors+=Distributor+ "Library:" songLibrary+=Library+ "Playlists:" playlists+=Playlist*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//"Distributors:"
		public Keyword getDistributorsKeyword_1() { return cDistributorsKeyword_1; }

		//distributors+=Distributor+
		public Assignment getDistributorsAssignment_2() { return cDistributorsAssignment_2; }

		//Distributor
		public RuleCall getDistributorsDistributorParserRuleCall_2_0() { return cDistributorsDistributorParserRuleCall_2_0; }

		//"Library:"
		public Keyword getLibraryKeyword_3() { return cLibraryKeyword_3; }

		//songLibrary+=Library+
		public Assignment getSongLibraryAssignment_4() { return cSongLibraryAssignment_4; }

		//Library
		public RuleCall getSongLibraryLibraryParserRuleCall_4_0() { return cSongLibraryLibraryParserRuleCall_4_0; }

		//"Playlists:"
		public Keyword getPlaylistsKeyword_5() { return cPlaylistsKeyword_5; }

		//playlists+=Playlist*
		public Assignment getPlaylistsAssignment_6() { return cPlaylistsAssignment_6; }

		//Playlist
		public RuleCall getPlaylistsPlaylistParserRuleCall_6_0() { return cPlaylistsPlaylistParserRuleCall_6_0; }
	}

	public class PlaylistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Playlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cConsistsOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsItemParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cItemsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cItemsItemParserRuleCall_3_1_0 = (RuleCall)cItemsAssignment_3_1.eContents().get(0);
		
		//Playlist:
		//	name=ID "consists of" items+=Item ("," items+=Item)*;
		public ParserRule getRule() { return rule; }

		//name=ID "consists of" items+=Item ("," items+=Item)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"consists of"
		public Keyword getConsistsOfKeyword_1() { return cConsistsOfKeyword_1; }

		//items+=Item
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }

		//Item
		public RuleCall getItemsItemParserRuleCall_2_0() { return cItemsItemParserRuleCall_2_0; }

		//("," items+=Item)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//items+=Item
		public Assignment getItemsAssignment_3_1() { return cItemsAssignment_3_1; }

		//Item
		public RuleCall getItemsItemParserRuleCall_3_1_0() { return cItemsItemParserRuleCall_3_1_0; }
	}

	public class PlaylistItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlaylistItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlaylistParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSongParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PlaylistItem:
		//	Playlist | Song;
		public ParserRule getRule() { return rule; }

		//Playlist | Song
		public Alternatives getAlternatives() { return cAlternatives; }

		//Playlist
		public RuleCall getPlaylistParserRuleCall_0() { return cPlaylistParserRuleCall_0; }

		//Song
		public RuleCall getSongParserRuleCall_1() { return cSongParserRuleCall_1; }
	}

	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSongsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSongsSongParserRuleCall_3_0 = (RuleCall)cSongsAssignment_3.eContents().get(0);
		
		//Library:
		//	"Library " name=ID ":" songs+=Song*;
		public ParserRule getRule() { return rule; }

		//"Library " name=ID ":" songs+=Song*
		public Group getGroup() { return cGroup; }

		//"Library "
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//songs+=Song*
		public Assignment getSongsAssignment_3() { return cSongsAssignment_3; }

		//Song
		public RuleCall getSongsSongParserRuleCall_3_0() { return cSongsSongParserRuleCall_3_0; }
	}

	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cItemAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cItemSongCrossReference_0_0 = (CrossReference)cItemAssignment_0.eContents().get(0);
		private final RuleCall cItemSongFQNParserRuleCall_0_0_1 = (RuleCall)cItemSongCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cListKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cItemAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cItemPlaylistCrossReference_1_1_0 = (CrossReference)cItemAssignment_1_1.eContents().get(0);
		private final RuleCall cItemPlaylistIDTerminalRuleCall_1_1_0_1 = (RuleCall)cItemPlaylistCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cWithoutKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cExcludedAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final CrossReference cExcludedSongCrossReference_1_2_2_0 = (CrossReference)cExcludedAssignment_1_2_2.eContents().get(0);
		private final RuleCall cExcludedSongFQNParserRuleCall_1_2_2_0_1 = (RuleCall)cExcludedSongCrossReference_1_2_2_0.eContents().get(1);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Keyword cCommaKeyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cExcludedAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final CrossReference cExcludedSongCrossReference_1_2_3_1_0 = (CrossReference)cExcludedAssignment_1_2_3_1.eContents().get(0);
		private final RuleCall cExcludedSongFQNParserRuleCall_1_2_3_1_0_1 = (RuleCall)cExcludedSongCrossReference_1_2_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2_4 = (Keyword)cGroup_1_2.eContents().get(4);
		
		//Item:
		//	item=[Song|FQN] | "list" item=[Playlist] ("without" "(" excluded+=[Song|FQN] ("," excluded+=[Song|FQN])* ")")?;
		public ParserRule getRule() { return rule; }

		//item=[Song|FQN] | "list" item=[Playlist] ("without" "(" excluded+=[Song|FQN] ("," excluded+=[Song|FQN])* ")")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//item=[Song|FQN]
		public Assignment getItemAssignment_0() { return cItemAssignment_0; }

		//[Song|FQN]
		public CrossReference getItemSongCrossReference_0_0() { return cItemSongCrossReference_0_0; }

		//FQN
		public RuleCall getItemSongFQNParserRuleCall_0_0_1() { return cItemSongFQNParserRuleCall_0_0_1; }

		//"list" item=[Playlist] ("without" "(" excluded+=[Song|FQN] ("," excluded+=[Song|FQN])* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"list"
		public Keyword getListKeyword_1_0() { return cListKeyword_1_0; }

		//item=[Playlist]
		public Assignment getItemAssignment_1_1() { return cItemAssignment_1_1; }

		//[Playlist]
		public CrossReference getItemPlaylistCrossReference_1_1_0() { return cItemPlaylistCrossReference_1_1_0; }

		//ID
		public RuleCall getItemPlaylistIDTerminalRuleCall_1_1_0_1() { return cItemPlaylistIDTerminalRuleCall_1_1_0_1; }

		//("without" "(" excluded+=[Song|FQN] ("," excluded+=[Song|FQN])* ")")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"without"
		public Keyword getWithoutKeyword_1_2_0() { return cWithoutKeyword_1_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_1() { return cLeftParenthesisKeyword_1_2_1; }

		//excluded+=[Song|FQN]
		public Assignment getExcludedAssignment_1_2_2() { return cExcludedAssignment_1_2_2; }

		//[Song|FQN]
		public CrossReference getExcludedSongCrossReference_1_2_2_0() { return cExcludedSongCrossReference_1_2_2_0; }

		//FQN
		public RuleCall getExcludedSongFQNParserRuleCall_1_2_2_0_1() { return cExcludedSongFQNParserRuleCall_1_2_2_0_1; }

		//("," excluded+=[Song|FQN])*
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }

		//","
		public Keyword getCommaKeyword_1_2_3_0() { return cCommaKeyword_1_2_3_0; }

		//excluded+=[Song|FQN]
		public Assignment getExcludedAssignment_1_2_3_1() { return cExcludedAssignment_1_2_3_1; }

		//[Song|FQN]
		public CrossReference getExcludedSongCrossReference_1_2_3_1_0() { return cExcludedSongCrossReference_1_2_3_1_0; }

		//FQN
		public RuleCall getExcludedSongFQNParserRuleCall_1_2_3_1_0_1() { return cExcludedSongFQNParserRuleCall_1_2_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_4() { return cRightParenthesisKeyword_1_2_4; }
	}

	public class SongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Song");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSungByKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArtistAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArtistSTRINGTerminalRuleCall_3_0 = (RuleCall)cArtistAssignment_3.eContents().get(0);
		private final Keyword cProducedByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDistributorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cDistributorDistributorCrossReference_5_0 = (CrossReference)cDistributorAssignment_5.eContents().get(0);
		private final RuleCall cDistributorDistributorIDTerminalRuleCall_5_0_1 = (RuleCall)cDistributorDistributorCrossReference_5_0.eContents().get(1);
		private final Keyword cLengthKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLengthAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLengthLengthParserRuleCall_7_0 = (RuleCall)cLengthAssignment_7.eContents().get(0);
		private final Keyword cGenreKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cGenreAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cGenreGenreEnumRuleCall_9_0 = (RuleCall)cGenreAssignment_9.eContents().get(0);
		private final Keyword cPriceKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPriceAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPriceDOUBLETerminalRuleCall_11_0 = (RuleCall)cPriceAssignment_11.eContents().get(0);
		
		//Song:
		//	"Song" name=ID "sung by" artist=STRING "produced by" distributor=[Distributor] "length:" length=Length "genre:"
		//	genre=Genre "price:" price=DOUBLE;
		public ParserRule getRule() { return rule; }

		//"Song" name=ID "sung by" artist=STRING "produced by" distributor=[Distributor] "length:" length=Length "genre:"
		//genre=Genre "price:" price=DOUBLE
		public Group getGroup() { return cGroup; }

		//"Song"
		public Keyword getSongKeyword_0() { return cSongKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"sung by"
		public Keyword getSungByKeyword_2() { return cSungByKeyword_2; }

		//artist=STRING
		public Assignment getArtistAssignment_3() { return cArtistAssignment_3; }

		//STRING
		public RuleCall getArtistSTRINGTerminalRuleCall_3_0() { return cArtistSTRINGTerminalRuleCall_3_0; }

		//"produced by"
		public Keyword getProducedByKeyword_4() { return cProducedByKeyword_4; }

		//distributor=[Distributor]
		public Assignment getDistributorAssignment_5() { return cDistributorAssignment_5; }

		//[Distributor]
		public CrossReference getDistributorDistributorCrossReference_5_0() { return cDistributorDistributorCrossReference_5_0; }

		//ID
		public RuleCall getDistributorDistributorIDTerminalRuleCall_5_0_1() { return cDistributorDistributorIDTerminalRuleCall_5_0_1; }

		//"length:"
		public Keyword getLengthKeyword_6() { return cLengthKeyword_6; }

		//length=Length
		public Assignment getLengthAssignment_7() { return cLengthAssignment_7; }

		//Length
		public RuleCall getLengthLengthParserRuleCall_7_0() { return cLengthLengthParserRuleCall_7_0; }

		//"genre:"
		public Keyword getGenreKeyword_8() { return cGenreKeyword_8; }

		//genre=Genre
		public Assignment getGenreAssignment_9() { return cGenreAssignment_9; }

		//Genre
		public RuleCall getGenreGenreEnumRuleCall_9_0() { return cGenreGenreEnumRuleCall_9_0; }

		//"price:"
		public Keyword getPriceKeyword_10() { return cPriceKeyword_10; }

		//price=DOUBLE
		public Assignment getPriceAssignment_11() { return cPriceAssignment_11; }

		//DOUBLE
		public RuleCall getPriceDOUBLETerminalRuleCall_11_0() { return cPriceDOUBLETerminalRuleCall_11_0; }
	}

	public class LengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Length");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMinutesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMinutesINTTerminalRuleCall_0_0 = (RuleCall)cMinutesAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecondsSECONDSTerminalRuleCall_2_0 = (RuleCall)cSecondsAssignment_2.eContents().get(0);
		
		//Length:
		//	minutes=INT ":" seconds=SECONDS;
		public ParserRule getRule() { return rule; }

		//minutes=INT ":" seconds=SECONDS
		public Group getGroup() { return cGroup; }

		//minutes=INT
		public Assignment getMinutesAssignment_0() { return cMinutesAssignment_0; }

		//INT
		public RuleCall getMinutesINTTerminalRuleCall_0_0() { return cMinutesINTTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//seconds=SECONDS
		public Assignment getSecondsAssignment_2() { return cSecondsAssignment_2; }

		//SECONDS
		public RuleCall getSecondsSECONDSTerminalRuleCall_2_0() { return cSecondsSECONDSTerminalRuleCall_2_0; }
	}

	public class DistributorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Distributor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDistributorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAddressKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAddressAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddressSTRINGTerminalRuleCall_3_0 = (RuleCall)cAddressAssignment_3.eContents().get(0);
		private final Keyword cAccountInformationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIBANKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIbanAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIbanSTRINGTerminalRuleCall_6_0 = (RuleCall)cIbanAssignment_6.eContents().get(0);
		private final Keyword cBICKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBicAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBicSTRINGTerminalRuleCall_8_0 = (RuleCall)cBicAssignment_8.eContents().get(0);
		
		//Distributor:
		//	"Distributor" name=ID "Address:" address=STRING "Account Information:" "IBAN:" iban=STRING "BIC:" bic=STRING;
		public ParserRule getRule() { return rule; }

		//"Distributor" name=ID "Address:" address=STRING "Account Information:" "IBAN:" iban=STRING "BIC:" bic=STRING
		public Group getGroup() { return cGroup; }

		//"Distributor"
		public Keyword getDistributorKeyword_0() { return cDistributorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"Address:"
		public Keyword getAddressKeyword_2() { return cAddressKeyword_2; }

		//address=STRING
		public Assignment getAddressAssignment_3() { return cAddressAssignment_3; }

		//STRING
		public RuleCall getAddressSTRINGTerminalRuleCall_3_0() { return cAddressSTRINGTerminalRuleCall_3_0; }

		//"Account Information:"
		public Keyword getAccountInformationKeyword_4() { return cAccountInformationKeyword_4; }

		//"IBAN:"
		public Keyword getIBANKeyword_5() { return cIBANKeyword_5; }

		//iban=STRING
		public Assignment getIbanAssignment_6() { return cIbanAssignment_6; }

		//STRING
		public RuleCall getIbanSTRINGTerminalRuleCall_6_0() { return cIbanSTRINGTerminalRuleCall_6_0; }

		//"BIC:"
		public Keyword getBICKeyword_7() { return cBICKeyword_7; }

		//bic=STRING
		public Assignment getBicAssignment_8() { return cBicAssignment_8; }

		//STRING
		public RuleCall getBicSTRINGTerminalRuleCall_8_0() { return cBicSTRINGTerminalRuleCall_8_0; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class GenreElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Genre");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPOPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPOPPOPKeyword_0_0 = (Keyword)cPOPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cROCKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cROCKROCKKeyword_1_0 = (Keyword)cROCKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHARDROCKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHARDROCKHARDROCKKeyword_2_0 = (Keyword)cHARDROCKEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCLASSICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCLASSICCLASSICKeyword_3_0 = (Keyword)cCLASSICEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFOLKEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFOLKFOLKKeyword_4_0 = (Keyword)cFOLKEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOTHEREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOTHEROTHERKeyword_5_0 = (Keyword)cOTHEREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Genre:
		//	POP | ROCK | HARDROCK | CLASSIC | FOLK | OTHER;
		public EnumRule getRule() { return rule; }

		//POP | ROCK | HARDROCK | CLASSIC | FOLK | OTHER
		public Alternatives getAlternatives() { return cAlternatives; }

		//POP
		public EnumLiteralDeclaration getPOPEnumLiteralDeclaration_0() { return cPOPEnumLiteralDeclaration_0; }

		//"POP"
		public Keyword getPOPPOPKeyword_0_0() { return cPOPPOPKeyword_0_0; }

		//ROCK
		public EnumLiteralDeclaration getROCKEnumLiteralDeclaration_1() { return cROCKEnumLiteralDeclaration_1; }

		//"ROCK"
		public Keyword getROCKROCKKeyword_1_0() { return cROCKROCKKeyword_1_0; }

		//HARDROCK
		public EnumLiteralDeclaration getHARDROCKEnumLiteralDeclaration_2() { return cHARDROCKEnumLiteralDeclaration_2; }

		//"HARDROCK"
		public Keyword getHARDROCKHARDROCKKeyword_2_0() { return cHARDROCKHARDROCKKeyword_2_0; }

		//CLASSIC
		public EnumLiteralDeclaration getCLASSICEnumLiteralDeclaration_3() { return cCLASSICEnumLiteralDeclaration_3; }

		//"CLASSIC"
		public Keyword getCLASSICCLASSICKeyword_3_0() { return cCLASSICCLASSICKeyword_3_0; }

		//FOLK
		public EnumLiteralDeclaration getFOLKEnumLiteralDeclaration_4() { return cFOLKEnumLiteralDeclaration_4; }

		//"FOLK"
		public Keyword getFOLKFOLKKeyword_4_0() { return cFOLKFOLKKeyword_4_0; }

		//OTHER
		public EnumLiteralDeclaration getOTHEREnumLiteralDeclaration_5() { return cOTHEREnumLiteralDeclaration_5; }

		//"OTHER"
		public Keyword getOTHEROTHERKeyword_5_0() { return cOTHEROTHERKeyword_5_0; }
	}
	
	private final ModelElements pModel;
	private final PlaylistElements pPlaylist;
	private final PlaylistItemElements pPlaylistItem;
	private final LibraryElements pLibrary;
	private final ItemElements pItem;
	private final SongElements pSong;
	private final LengthElements pLength;
	private final TerminalRule tSECONDS;
	private final TerminalRule tDOUBLE;
	private final DistributorElements pDistributor;
	private final GenreElements unknownRuleGenre;
	private final FQNElements pFQN;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PlaylistDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPlaylist = new PlaylistElements();
		this.pPlaylistItem = new PlaylistItemElements();
		this.pLibrary = new LibraryElements();
		this.pItem = new ItemElements();
		this.pSong = new SongElements();
		this.pLength = new LengthElements();
		this.tSECONDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SECONDS");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		this.pDistributor = new DistributorElements();
		this.unknownRuleGenre = new GenreElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.univie.swa.ase.example.PlaylistDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} "Distributors:" distributors+=Distributor+ "Library:" songLibrary+=Library+ "Playlists:" playlists+=Playlist*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Playlist:
	//	name=ID "consists of" items+=Item ("," items+=Item)*;
	public PlaylistElements getPlaylistAccess() {
		return pPlaylist;
	}
	
	public ParserRule getPlaylistRule() {
		return getPlaylistAccess().getRule();
	}

	//PlaylistItem:
	//	Playlist | Song;
	public PlaylistItemElements getPlaylistItemAccess() {
		return pPlaylistItem;
	}
	
	public ParserRule getPlaylistItemRule() {
		return getPlaylistItemAccess().getRule();
	}

	//Library:
	//	"Library " name=ID ":" songs+=Song*;
	public LibraryElements getLibraryAccess() {
		return pLibrary;
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}

	//Item:
	//	item=[Song|FQN] | "list" item=[Playlist] ("without" "(" excluded+=[Song|FQN] ("," excluded+=[Song|FQN])* ")")?;
	public ItemElements getItemAccess() {
		return pItem;
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}

	//Song:
	//	"Song" name=ID "sung by" artist=STRING "produced by" distributor=[Distributor] "length:" length=Length "genre:"
	//	genre=Genre "price:" price=DOUBLE;
	public SongElements getSongAccess() {
		return pSong;
	}
	
	public ParserRule getSongRule() {
		return getSongAccess().getRule();
	}

	//Length:
	//	minutes=INT ":" seconds=SECONDS;
	public LengthElements getLengthAccess() {
		return pLength;
	}
	
	public ParserRule getLengthRule() {
		return getLengthAccess().getRule();
	}

	//terminal SECONDS:
	//	"0".."5" "0".."9";
	public TerminalRule getSECONDSRule() {
		return tSECONDS;
	} 

	//terminal DOUBLE returns ecore::EDouble:
	//	INT "." INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//Distributor:
	//	"Distributor" name=ID "Address:" address=STRING "Account Information:" "IBAN:" iban=STRING "BIC:" bic=STRING;
	public DistributorElements getDistributorAccess() {
		return pDistributor;
	}
	
	public ParserRule getDistributorRule() {
		return getDistributorAccess().getRule();
	}

	//enum Genre:
	//	POP | ROCK | HARDROCK | CLASSIC | FOLK | OTHER;
	public GenreElements getGenreAccess() {
		return unknownRuleGenre;
	}
	
	public EnumRule getGenreRule() {
		return getGenreAccess().getRule();
	}

	//FQN returns ecore::EString:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
