/*
* generated by Xtext
*/
grammar InternalPlaylistDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.ac.univie.swa.ase.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.ac.univie.swa.ase.example.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.ac.univie.swa.ase.example.services.PlaylistDslGrammarAccess;

}

@parser::members {

 	private PlaylistDslGrammarAccess grammarAccess;
 	
    public InternalPlaylistDslParser(TokenStream input, PlaylistDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected PlaylistDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)	otherlv_1='Distributors:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getDistributorsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDistributorsDistributorParserRuleCall_2_0()); 
	    }
		lv_distributors_2_0=ruleDistributor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"distributors",
        		lv_distributors_2_0, 
        		"Distributor");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='Library:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelAccess().getLibraryKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSongLibraryLibraryParserRuleCall_4_0()); 
	    }
		lv_songLibrary_4_0=ruleLibrary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"songLibrary",
        		lv_songLibrary_4_0, 
        		"Library");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5='Playlists:' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getPlaylistsKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPlaylistsPlaylistParserRuleCall_6_0()); 
	    }
		lv_playlists_6_0=rulePlaylist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"playlists",
        		lv_playlists_6_0, 
        		"Playlist");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePlaylist
entryRulePlaylist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlaylistRule()); }
	 iv_rulePlaylist=rulePlaylist 
	 { $current=$iv_rulePlaylist.current; } 
	 EOF 
;

// Rule Playlist
rulePlaylist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPlaylistAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlaylistRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='consists of' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPlaylistAccess().getConsistsOfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlaylistAccess().getItemsItemParserRuleCall_2_0()); 
	    }
		lv_items_2_0=ruleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlaylistRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"Item");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPlaylistAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlaylistAccess().getItemsItemParserRuleCall_3_1_0()); 
	    }
		lv_items_4_0=ruleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlaylistRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"Item");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;







// Entry rule entryRuleLibrary
entryRuleLibrary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLibraryRule()); }
	 iv_ruleLibrary=ruleLibrary 
	 { $current=$iv_ruleLibrary.current; } 
	 EOF 
;

// Rule Library
ruleLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Library ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLibraryAccess().getLibraryKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLibraryAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLibraryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLibraryAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getSongsSongParserRuleCall_3_0()); 
	    }
		lv_songs_3_0=ruleSong		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLibraryRule());
	        }
       		add(
       			$current, 
       			"songs",
        		lv_songs_3_0, 
        		"Song");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemRule()); }
	 iv_ruleItem=ruleItem 
	 { $current=$iv_ruleItem.current; } 
	 EOF 
;

// Rule Item
ruleItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getItemAccess().getItemSongCrossReference_0_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='list' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getItemAccess().getListKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getItemAccess().getItemPlaylistCrossReference_1_1_0()); 
	}

)
)(	otherlv_3='without' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getItemAccess().getWithoutKeyword_1_2_0());
    }
	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getItemAccess().getLeftParenthesisKeyword_1_2_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getItemAccess().getExcludedSongCrossReference_1_2_2_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getItemAccess().getCommaKeyword_1_2_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getItemAccess().getExcludedSongCrossReference_1_2_3_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getItemAccess().getRightParenthesisKeyword_1_2_4());
    }
)?))
;





// Entry rule entryRuleSong
entryRuleSong returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSongRule()); }
	 iv_ruleSong=ruleSong 
	 { $current=$iv_ruleSong.current; } 
	 EOF 
;

// Rule Song
ruleSong returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Song' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSongAccess().getSongKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSongAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSongRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='sung by' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSongAccess().getSungByKeyword_2());
    }
(
(
		lv_artist_3_0=RULE_STRING
		{
			newLeafNode(lv_artist_3_0, grammarAccess.getSongAccess().getArtistSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSongRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"artist",
        		lv_artist_3_0, 
        		"STRING");
	    }

)
)	otherlv_4='produced by' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSongAccess().getProducedByKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSongRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getSongAccess().getDistributorDistributorCrossReference_5_0()); 
	}

)
)	otherlv_6='length:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSongAccess().getLengthKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSongAccess().getLengthLengthParserRuleCall_7_0()); 
	    }
		lv_length_7_0=ruleLength		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSongRule());
	        }
       		set(
       			$current, 
       			"length",
        		lv_length_7_0, 
        		"Length");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='genre:' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSongAccess().getGenreKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSongAccess().getGenreGenreEnumRuleCall_9_0()); 
	    }
		lv_genre_9_0=ruleGenre		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSongRule());
	        }
       		set(
       			$current, 
       			"genre",
        		lv_genre_9_0, 
        		"Genre");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='price:' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSongAccess().getPriceKeyword_10());
    }
(
(
		lv_price_11_0=RULE_DOUBLE
		{
			newLeafNode(lv_price_11_0, grammarAccess.getSongAccess().getPriceDOUBLETerminalRuleCall_11_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSongRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"price",
        		lv_price_11_0, 
        		"DOUBLE");
	    }

)
))
;





// Entry rule entryRuleLength
entryRuleLength returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLengthRule()); }
	 iv_ruleLength=ruleLength 
	 { $current=$iv_ruleLength.current; } 
	 EOF 
;

// Rule Length
ruleLength returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_minutes_0_0=RULE_INT
		{
			newLeafNode(lv_minutes_0_0, grammarAccess.getLengthAccess().getMinutesINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLengthRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minutes",
        		lv_minutes_0_0, 
        		"INT");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLengthAccess().getColonKeyword_1());
    }
(
(
		lv_seconds_2_0=RULE_SECONDS
		{
			newLeafNode(lv_seconds_2_0, grammarAccess.getLengthAccess().getSecondsSECONDSTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLengthRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"seconds",
        		lv_seconds_2_0, 
        		"SECONDS");
	    }

)
))
;





// Entry rule entryRuleDistributor
entryRuleDistributor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDistributorRule()); }
	 iv_ruleDistributor=ruleDistributor 
	 { $current=$iv_ruleDistributor.current; } 
	 EOF 
;

// Rule Distributor
ruleDistributor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Distributor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDistributorAccess().getDistributorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDistributorAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDistributorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='Address:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDistributorAccess().getAddressKeyword_2());
    }
(
(
		lv_address_3_0=RULE_STRING
		{
			newLeafNode(lv_address_3_0, grammarAccess.getDistributorAccess().getAddressSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDistributorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"address",
        		lv_address_3_0, 
        		"STRING");
	    }

)
)	otherlv_4='Account Information:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDistributorAccess().getAccountInformationKeyword_4());
    }
	otherlv_5='IBAN:' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDistributorAccess().getIBANKeyword_5());
    }
(
(
		lv_iban_6_0=RULE_STRING
		{
			newLeafNode(lv_iban_6_0, grammarAccess.getDistributorAccess().getIbanSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDistributorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"iban",
        		lv_iban_6_0, 
        		"STRING");
	    }

)
)	otherlv_7='BIC:' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDistributorAccess().getBICKeyword_7());
    }
(
(
		lv_bic_8_0=RULE_STRING
		{
			newLeafNode(lv_bic_8_0, grammarAccess.getDistributorAccess().getBicSTRINGTerminalRuleCall_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDistributorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bic",
        		lv_bic_8_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule Genre
ruleGenre returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='POP' 
	{
        $current = grammarAccess.getGenreAccess().getPOPEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGenreAccess().getPOPEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='ROCK' 
	{
        $current = grammarAccess.getGenreAccess().getROCKEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGenreAccess().getROCKEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='HARDROCK' 
	{
        $current = grammarAccess.getGenreAccess().getHARDROCKEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getGenreAccess().getHARDROCKEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='CLASSIC' 
	{
        $current = grammarAccess.getGenreAccess().getCLASSICEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getGenreAccess().getCLASSICEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='FOLK' 
	{
        $current = grammarAccess.getGenreAccess().getFOLKEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getGenreAccess().getFOLKEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='OTHER' 
	{
        $current = grammarAccess.getGenreAccess().getOTHEREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getGenreAccess().getOTHEREnumLiteralDeclaration_5()); 
    }
));



RULE_SECONDS : '0'..'5' '0'..'9';

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


