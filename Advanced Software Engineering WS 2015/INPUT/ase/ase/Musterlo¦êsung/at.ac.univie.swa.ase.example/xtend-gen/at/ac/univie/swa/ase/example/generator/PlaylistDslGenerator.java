/**
 * generated by Xtext
 */
package at.ac.univie.swa.ase.example.generator;

import at.ac.univie.swa.ase.example.PlayListUtils;
import at.ac.univie.swa.ase.example.playlistDsl.Distributor;
import at.ac.univie.swa.ase.example.playlistDsl.Length;
import at.ac.univie.swa.ase.example.playlistDsl.Model;
import at.ac.univie.swa.ase.example.playlistDsl.Playlist;
import at.ac.univie.swa.ase.example.playlistDsl.PlaylistItem;
import at.ac.univie.swa.ase.example.playlistDsl.Song;
import com.google.common.collect.Iterators;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class PlaylistDslGenerator implements IGenerator {
  @Extension
  private PlayListUtils utils = new PlayListUtils();
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<Model> _filter = Iterators.<Model>filter(_allContents, Model.class);
    final Model root = IteratorExtensions.<Model>head(_filter);
    final HashMap<Distributor, Double> earnings = new HashMap<Distributor, Double>();
    EList<Playlist> _playlists = root.getPlaylists();
    for (final Playlist p : _playlists) {
      StringConcatenation _builder = new StringConcatenation();
      String _name = p.getName();
      _builder.append(_name, "");
      _builder.append(".html");
      String _compile = this.compile(p, earnings);
      fsa.generateFile(_builder.toString(), _compile);
    }
    String _print = this.print(earnings);
    fsa.generateFile("earnings.html", _print);
  }
  
  public String print(final Map<Distributor, Double> earnings) {
    Set<Distributor> _keySet = earnings.keySet();
    final Function1<Distributor, Double> _function = new Function1<Distributor, Double>() {
      public Double apply(final Distributor d) {
        return earnings.get(d);
      }
    };
    List<Distributor> _sortBy = IterableExtensions.<Distributor, Double>sortBy(_keySet, _function);
    final List<Distributor> distributors = ListExtensions.<Distributor>reverse(_sortBy);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>Earningstable</head>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("<table>");
    _builder.newLine();
    _builder.append("<tr><td>distributor.name</td><td>amount</td></tr>");
    _builder.newLine();
    {
      for(final Distributor d : distributors) {
        _builder.append("<tr><td>");
        String _name = d.getName();
        _builder.append(_name, "");
        _builder.append("</td><td>");
        Double _get = earnings.get(d);
        _builder.append(_get, "");
        _builder.append("</td></tr>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _compile(final Playlist p, final Map<Distributor, Double> earnings) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>Playlist Table for ");
    String _name = p.getName();
    _builder.append(_name, "");
    _builder.append("</head>");
    _builder.newLineIfNotEmpty();
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("<table>");
    _builder.newLine();
    _builder.append("<tr><td>name</td><td>distributor.name</td><td>length</td><td>price</td></tr>");
    _builder.newLine();
    {
      Collection<Song> _songs = this.utils.getSongs(p);
      for(final Song s : _songs) {
        String _compile = this.compile(s, earnings);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _compile(final Song s, final Map<Distributor, Double> earnings) {
    double value = 0.0;
    Distributor _distributor = s.getDistributor();
    boolean _containsKey = earnings.containsKey(_distributor);
    if (_containsKey) {
      Distributor _distributor_1 = s.getDistributor();
      Double _get = earnings.get(_distributor_1);
      value = (_get).doubleValue();
    }
    double _price = s.getPrice();
    double _plus = (value + _price);
    value = _plus;
    Distributor _distributor_2 = s.getDistributor();
    earnings.put(_distributor_2, Double.valueOf(value));
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<tr><td>");
    String _name = s.getName();
    _builder.append(_name, "");
    _builder.append("</td><td>");
    Distributor _distributor_3 = s.getDistributor();
    String _name_1 = _distributor_3.getName();
    _builder.append(_name_1, "");
    _builder.append("</td><td>");
    Length _length = s.getLength();
    int _minutes = _length.getMinutes();
    _builder.append(_minutes, "");
    _builder.append(":");
    Length _length_1 = s.getLength();
    String _seconds = _length_1.getSeconds();
    _builder.append(_seconds, "");
    _builder.append("</td><td>");
    double _price_1 = s.getPrice();
    _builder.append(_price_1, "");
    _builder.append("</td></tr>");
    return _builder.toString();
  }
  
  public String compile(final PlaylistItem p, final Map<Distributor, Double> earnings) {
    if (p instanceof Playlist) {
      return _compile((Playlist)p, earnings);
    } else if (p instanceof Song) {
      return _compile((Song)p, earnings);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(p, earnings).toString());
    }
  }
}
